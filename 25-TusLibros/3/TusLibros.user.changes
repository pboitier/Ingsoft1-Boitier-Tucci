

----SNAPSHOT----(31 October 2019 00:16:39) TusLibros.image priorSource: 14383448!

----STARTUP---- (4 November 2019 20:29:02) as /home/stucci/Desktop/linux64/TusLibros.image!


!classRemoval: #Cart stamp: 'st 11/4/2019 20:29:13'!
Object subclass: #Cart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'st 11/4/2019 20:29:13'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/stucci/Desktop/linux64/TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'st 11/4/2019 20:32:48'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'st 11/4/2019 20:33:04'!
test01YouCantCheckoutAnEmptyCart! !

----End fileIn of /home/stucci/Desktop/Ingsoft1-Boitier-Tucci/22-TerniLapilli/Juego-Test.st----!

----STARTUP---- (4 November 2019 20:36:30) as /home/stucci/Desktop/linux64/TusLibros.image!


!classRemoval: #Cart stamp: 'st 11/4/2019 20:36:39'!
Object subclass: #Cart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'st 11/4/2019 20:36:39'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'st 11/4/2019 20:36:39'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'st 11/4/2019 20:36:39'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'st 11/4/2019 20:36:39'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'st 11/4/2019 20:36:39'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'st 11/4/2019 20:36:39'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'st 11/4/2019 20:36:39'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'st 11/4/2019 20:36:39'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'st 11/4/2019 20:36:39'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'st 11/4/2019 20:33:04'!
test01YouCantCheckoutAnEmptyCart! !

!classDefinition: #JuegoTest category: #'Juego-Test' stamp: 'st 11/4/2019 20:36:39'!
TestCase subclass: #JuegoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Juego-Test'!

!classDefinition: #JuegoTest category: #'Juego-Test' stamp: 'st 11/4/2019 20:36:39'!
TestCase subclass: #JuegoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Juego-Test'!
!JuegoTest methodsFor: 'as yet unclassified' stamp: 's 10/10/2019 18:50:13'!
test01FirstPlayerIsXAndBoardIsEmpty

	| game |
	
	game _ TerniLapilli new.
	
	self assert: 0 equals: game numberOfXAndOPlayed.
	self assert: true equals: game isPlayingX.
	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 's 10/10/2019 18:47:39'!
test02AtCreationBoardIsEmptyAndOCannotPlay

	| game |
	
	game _ TerniLapilli new.
	
	self assert: 0 equals: game numberOfXAndOPlayed.
	self assert: false equals: game isPlayingO.! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/13/2019 15:21:34'!
test03WhenPlayerXPlaysInAnEmptyBoardItIsCorrectlyModifiedAndNextPlayerIsO

	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 1@1.
	
	self assert: true equals: (game isXInPosition: 1@1).
	self assert: 1 equals: (game numberOfXAndOPlayed).
	self assert: true equals: game isPlayingO.! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:09:13'!
test04APlayerCantPutPiecesWhenItIsNotItsTurn

	| game |
	
	game _ TerniLapilli new.
	
	self
		should: [ game putXAt: 1@2. game putXAt: 2@2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli onePlayerCanOnlyPlayInItsTurnError ].
				
	self assert: false equals: (game isXInPosition: 2@2).! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:34:41'!
test05YouCantPlaceXOrOInAnOccupiedSpot

	| game |
	
	game _ TerniLapilli new.
	
	self
		should: [ game putXAt: 1@1. game putOAt: 1@1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantPlaceXOrOInAnOccupiedSpotError ].
		
		
	self assert: true equals: (game isXInPosition: 1@1).
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:35:35'!
test06YouCantPlaceXOrOOutOfBounds

	| game |
	
	game _ TerniLapilli new.
	
	self
		should: [ game putXAt: 0@0.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantPlaceXOrOOutOfBoundsError ].
		
		
	self assert: 0 equals: game numberOfXAndOPlayed.! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:35:57'!
test07YouCantPlaceMoreThan3XOrO

	| game |
	
	game _ TerniLapilli new.
	
	self
		should: [ game putXAt: 1@1.
				  game putOAt: 1@2.
				  game putXAt: 1@3.
				  game putOAt: 2@1.
				  game putXAt: 2@2.
				  game putOAt: 2@3.
				  game putXAt: 3@1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantPlaceMoreThan3XOrOError. ].
		
	self assert: false equals: (game isXInPosition: 3@1).! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:10:09'!
test08MoveXFromOnePositionToAnother

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
	
	game moveXFrom: 2@2 to: 3@3.
	
	self assert: true equals: (game isXInPosition: 3@3).
	self assert: false equals: (game isXInPosition: 2@2).
	self assert: 6 equals: (game numberOfXAndOPlayed).
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:32:26'!
test09YouCantMoveAnEmptySpace

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 3@3 to: 3@2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveAnEmptySpaceError ].
		
	self assert: false equals: (game isXInPosition: 3@3).	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:32:48'!
test10YouCantMoveToAnOccupiedSpace

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 2@2 to: 2@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveToAnOcuppiedSpaceError].
		
	self assert: true equals: (game isXInPosition: 2@2).
	self assert: false equals: (game isXInPosition: 2@3).	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:33:16'!
test11YouCanOnlyMoveWhenYouHavePlaced3XOrO

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 2@2 to: 2@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveWithLessThan3XOrOOnBoardError].
		
		
	self assert: true equals: (game isXInPosition: 2@2).
	self assert: false equals: (game isXInPosition: 2@3).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:38:21'!
test12YouCanMoveOnlyOnYourTurn

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveOFrom: 2@3 to: 3@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli canOnlyMoveOnYourTurnError].
		
		
	self assert: true equals: (game isOInPosition: 2@3).
	self assert: false equals: (game isOInPosition: 3@3).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:43:22'!
test13YouCanOnlyMoveYourPieces

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 2@3 to: 3@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli canOnlyMoveYourPiecesError].
		
		
	self assert: true equals: (game isOInPosition: 2@3).
	self assert: false equals: (game isOInPosition: 3@3).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:45:39'!
test14YouCantMoveOutOfBounds

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 2@3 to: 2@4.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveOutOfBoundsError].
		
		
	self assert: true equals: (game isOInPosition: 2@3).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/14/2019 18:35:17'!
test15YouCantMoveToNonNeighbourSpotsInSameRow

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 3@3.
	game putOAt: 2@1.
	game putXAt: 3@1.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 1@1 to: 1@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveToNonNeighbourSpotsError].
		
		
	self assert: false equals: (game isXInPosition: 1@3).	
! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/14/2019 16:58:06'!
test16YouCantMoveToNonNeighbourSpotsInSameColumns

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 1@1 to: 3@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveToNonNeighbourSpotsError].
		
		
	self assert: false equals: (game isXInPosition: 3@3).	
! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/14/2019 17:20:48'!
test17YouCantMoveInADiagonalInSpotsWhereItIsNotAllowed

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@3.
	self
		should: [ game moveXFrom: 2@3 to: 3@2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveToNonNeighbourSpotsError].
		
		
	self assert: false equals: (game isXInPosition: 3@2).	
! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:28:44'!
test18YouCantMoveMoreThanOneSpotDiagonally

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@3.
	self
		should: [ game moveXFrom: 1@1 to: 3@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveToNonNeighbourSpotsError].
		
		
	self assert: false equals: (game isXInPosition: 3@2).	
! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/14/2019 18:45:49'!
test19YouWinIfYouPut3XOrOinAColumn

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@2.
	game putXAt: 3@1.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:29:10'!
test20YouWinIfYouPut3XOrOinARow

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:29:15'!
test21YouWinIfYouPut3XOrOinADiagonal

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 2@3.
	game putXAt: 3@3.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:29:25'!
test22YouWinIfYouMoveXOrOAndMake3InARow

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 1@3.
	game putOAt: 3@1.
	game putXAt: 2@2.
	game putOAt: 3@2.
	
	game moveXFrom: 2@2 to: 1@2.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:29:33'!
test23YouWinIfYouMoveXOrOAndMake3InAColumn

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@2.
	game putXAt: 3@1.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:29:41'!
test24YouWinIfYouMoveXOrOAndMake3InADiagonal

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@2.
	game putXAt: 3@1.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:30:07'!
test25YouCantPutIfAPlayerAlreadyWon

	
	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 2@3.
	game putXAt: 3@3.
		
	self
	should: [ game putOAt: 1@3]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli cantPlayAfterEitherPlayerHasWon].
	
	
	self assert: false equals: (game isOInPosition: 1@3).
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:30:15'!
test26YouCantMoveIfAPlayerAlreadyWon

	
	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@3.
	game putXAt: 3@2.
	game putOAt: 3@3.
	
	game moveXFrom: 3@2 to: 3@1.
		
	self
	should: [ game moveOFrom: 1@2 to: 1@3  ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli cantPlayAfterEitherPlayerHasWon].
	
	self assert: true equals: (game isOInPosition: 1@2).
	self assert: false equals: (game isOInPosition: 1@3).
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:30:22'!
test27WhenOMovesTheNextPlayerIsX

	
	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@3.
	game putXAt: 3@2.
	game putOAt: 3@3.
	
	game moveXFrom: 3@2 to: 2@2.
	game moveOFrom: 3@3 to: 3@2.
	
	self assert: true equals: game isPlayingX.! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:30:26'!
test28WhenXMovesTheNextPlayerIsO

	
	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@3.
	game putXAt: 3@2.
	game putOAt: 3@1.
	
	game moveXFrom: 3@2 to: 3@3.
	

	self assert: true equals: game isPlayingO.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'st 11/4/2019 20:38:28'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:38:14' prior: 50781348!
test01YouCantCheckoutAnEmptyCart

	|cart cashier|
	
	cart _ Cart new.
	cashier _ Cashier new.
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCart ].

	! !
!Cashier methodsFor: 'no messages' stamp: 'st 11/4/2019 20:38:53'!
checkout! !

!methodRemoval: Cashier #checkout stamp: 'st 11/4/2019 20:39:04'!
checkout!
!Cashier methodsFor: 'no messages' stamp: 'st 11/4/2019 20:39:08'!
checkout: aCart! !

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:39:20'!
FAILURE!
!Cashier class methodsFor: 'no messages' stamp: 'st 11/4/2019 20:40:59'!
cannotCheckoutEmptyCartError

	^'Cannot checkout an empty cart'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:41:10' prior: 50781785!
test01YouCantCheckoutAnEmptyCart

	|cart cashier|
	
	cart _ Cart new.
	cashier _ Cashier new.
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:41:10'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:42:23' prior: 50781802!
checkout: aCart

	aCart isEmpty ifTrue: [Error signal: Cashier cannot]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:42:34' prior: 50781830!
checkout: aCart

	aCart isEmpty ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError]! !

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:42:36'!
ERROR!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:42:36'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:42:58' prior: 50781836!
checkout: aCart

	[aCart isEmpty] ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError]! !

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:42:59'!
FAILURE!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:42:59'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:43:27' prior: 50781848!
checkout: aCart

	(aCart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError]! !

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:43:27'!
ERROR!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:43:27'!
ERROR!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:43:32'!
ERROR!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:43:32'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/4/2019 20:43:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/4/2019 20:43:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 20:43:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/4/2019 20:43:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/4/2019 20:43:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/4/2019 20:43:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/4/2019 20:43:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/4/2019 20:43:54'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:43:59'!
ERROR!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:43:59'!
ERROR!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:44:05'!
ERROR!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:44:12'!
ERROR!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:44:41'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:46:51' prior: 50781814!
test01YouCantCheckoutAnEmptyCart

	|cart cashier|
	
	cart _ Cart createCart: (Array with: 'validBook').
	cashier _ Cashier new.
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:47:16' prior: 50781920!
test01YouCantCheckoutAnEmptyCart

	|cart cashier|
	
	cart _ Cart acceptingItemsOf: (Array with: 'validBook').
	cashier _ Cashier new.
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:47:17'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/4/2019 20:47:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/4/2019 20:47:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 20:47:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/4/2019 20:47:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/4/2019 20:47:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/4/2019 20:47:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/4/2019 20:47:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/4/2019 20:47:17'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:47:17'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:47:18'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:47:18'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:52:11'!
test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney

	|cart cashier|
	
	cart _ Cart acceptingItemsOf: (Array with: 'validBook').
	cashier _ Cashier new.
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:54:53' prior: 50781985!
test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney

	|cart cashier|
	
	cart _ Cart acceptingItemsOf: (Array with: 'validBook').
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	
	self assert: 100 equals: (cashier checkout: cart).

	! !

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 20:54:55'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:55:21' prior: 50781861!
checkout: aCart

	(aCart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError].
	
	^100.! !

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 20:55:28'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 20:55:28'!
PASSED!

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 20:55:28'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:01:49'!
test09subtotalOfEmptyCartIsZero

	| cart |
	
	cart := self createCart.
	
	self assert: 0 equals: cart subtotal.! !

!testRun: #CartTest #test09subtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:01:51'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:02:01'!
subtotal
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:02:15' prior: 50782041!
subtotal
	^0.! !

!testRun: #CartTest #test09subtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:02:17'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/4/2019 21:02:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/4/2019 21:02:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:02:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/4/2019 21:02:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/4/2019 21:02:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/4/2019 21:02:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/4/2019 21:02:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/4/2019 21:02:17'!
PASSED!

!testRun: #CartTest #test09subtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:02:17'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:02:37'!
test09SubtotalOfEmptyCartIsZero

	| cart |
	
	cart := self createCart.
	
	self assert: 0 equals: cart subtotal.! !

!methodRemoval: CartTest #test09subtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:02:37'!
test09subtotalOfEmptyCartIsZero

	| cart |
	
	cart := self createCart.
	
	self assert: 0 equals: cart subtotal.!
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:04:03'!
test10SubtotalOfOneItemIsCorrect

	| cart |
	
	cart := self createCart.
	
	self assert: 10 equals: cart subtotal.! !
!Cart methodsFor: 'initialization' stamp: 'st 11/4/2019 21:05:58' prior: 50781188!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !

Object subclass: #Cart
	instanceVariableNames: 'catalog items priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'st 11/4/2019 21:06:16'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'st 11/4/2019 21:08:45'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'support' stamp: 'st 11/4/2019 21:11:36' prior: 50781326!
defaultCatalog
	
	| catalog |

	catalog _ Dictionary new.
	catalog add: 'validBook'->100.	
	
	^catalog.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/4/2019 21:11:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/4/2019 21:11:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:11:37'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/4/2019 21:11:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/4/2019 21:11:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/4/2019 21:11:37'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/4/2019 21:11:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/4/2019 21:11:37'!
ERROR!

!testRun: #CartTest #test09SubtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:11:37'!
PASSED!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:11:37'!
FAILURE!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:11:54'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:12:26'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:12:35'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'st 11/4/2019 21:13:44' prior: 50781175!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/4/2019 21:13:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/4/2019 21:13:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:13:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/4/2019 21:13:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/4/2019 21:13:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/4/2019 21:13:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/4/2019 21:13:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/4/2019 21:13:46'!
PASSED!

!testRun: #CartTest #test09SubtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:13:46'!
PASSED!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:13:46'!
FAILURE!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:13:46'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:14:07' prior: 50782091!
test10SubtotalOfOneItemIsCorrect

	| cart |
	
	cart := self createCart.
	
	self assert: 100 equals: cart subtotal.! !

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:14:07'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'st 11/4/2019 21:17:58' prior: 50782045!
subtotal

	^ items inject: 0
	into: [:item :subtotal | subtotal + catalog at: item].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/4/2019 21:18:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/4/2019 21:18:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:18:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/4/2019 21:18:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/4/2019 21:18:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/4/2019 21:18:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/4/2019 21:18:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/4/2019 21:18:00'!
PASSED!

!testRun: #CartTest #test09SubtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:18:00'!
PASSED!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:18:00'!
FAILURE!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:18:00'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/4/2019 21:18:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/4/2019 21:18:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:18:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/4/2019 21:18:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/4/2019 21:18:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/4/2019 21:18:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/4/2019 21:18:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/4/2019 21:18:06'!
PASSED!

!testRun: #CartTest #test09SubtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:18:06'!
PASSED!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:18:06'!
FAILURE!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:18:06'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:18:56' prior: 50782215!
test10SubtotalOfOneItemIsCorrect

	| cart |
	
	cart := self createCart.
	cart add: 'validBook'.
	
	self assert: 100 equals: cart subtotal.! !

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:18:57'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'st 11/4/2019 21:19:14' prior: 50782225!
subtotal

	^ items inject: 0
	into: [:item :subtotal | subtotal + (catalog at: item)].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/4/2019 21:19:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/4/2019 21:19:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:19:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/4/2019 21:19:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/4/2019 21:19:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/4/2019 21:19:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/4/2019 21:19:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/4/2019 21:19:14'!
PASSED!

!testRun: #CartTest #test09SubtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:19:14'!
PASSED!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:19:14'!
ERROR!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:19:14'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'st 11/4/2019 21:19:40' prior: 50782309!
subtotal

	^ items inject: 0
	into: [:subtotal :item | subtotal + (catalog at: item)].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/4/2019 21:19:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/4/2019 21:19:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:19:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/4/2019 21:19:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/4/2019 21:19:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/4/2019 21:19:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/4/2019 21:19:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/4/2019 21:19:41'!
PASSED!

!testRun: #CartTest #test09SubtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:19:41'!
PASSED!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:19:41'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:20:41'!
test11SubtotalOfMoreThanItemIsCorrect

	| cart |
	
	cart := self createCart.
	cart add: 'validBook'.
	
	self assert: 200 equals: cart subtotal.! !

!testRun: #CartTest #test11SubtotalOfMoreThanItemIsCorrect stamp: 'st 11/4/2019 21:20:45'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:20:57' prior: 50782385!
test11SubtotalOfMoreThanItemIsCorrect

	| cart |
	
	cart := self createCart.
	cart add: 'validBook'.
	cart add: 'validBook'.
	
	self assert: 200 equals: cart subtotal.! !

!testRun: #CartTest #test11SubtotalOfMoreThanItemIsCorrect stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test09SubtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test10SubtotalOfOneItemIsCorrect stamp: 'st 11/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test11SubtotalOfMoreThanItemIsCorrect stamp: 'st 11/4/2019 21:20:57'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:23:14' prior: 50782000!
test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney

	|cart cashier priceList|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	
	self assert: 100 equals: (cashier checkout: cart).

	! !

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 21:23:14'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 21:23:14'!
PASSED!

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 21:23:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:24:07'!
test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney

	|cart cashier priceList|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	cart add: 'validBook'.
	
	self assert: 200 equals: (cashier checkout: cart).

	! !

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 21:24:07'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:24:20' prior: 50782015!
checkout: aCart

	(aCart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError].
	
	^ aCart subtotal.! !

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 21:24:20'!
PASSED!

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 21:24:20'!
PASSED!

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 21:24:20'!
PASSED!

----STARTUP---- (4 November 2019 21:39:22) as /home/stucci/Desktop/linux64/TusLibros.image!


!classRemoval: #Cart stamp: 'st 11/4/2019 21:39:31'!
Object subclass: #Cart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'st 11/4/2019 21:39:31'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'st 11/4/2019 21:39:32'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'st 11/4/2019 21:39:32'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'st 11/4/2019 21:39:32'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'st 11/4/2019 21:39:32'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'st 11/4/2019 21:39:32'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'st 11/4/2019 21:39:32'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'st 11/4/2019 21:39:32'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'st 11/4/2019 21:39:32'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'st 11/4/2019 20:33:04'!
test01YouCantCheckoutAnEmptyCart! !

!classDefinition: #JuegoTest category: #'Juego-Test' stamp: 'st 11/4/2019 21:39:32'!
TestCase subclass: #JuegoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Juego-Test'!

!classDefinition: #JuegoTest category: #'Juego-Test' stamp: 'st 11/4/2019 21:39:32'!
TestCase subclass: #JuegoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Juego-Test'!
!JuegoTest methodsFor: 'as yet unclassified' stamp: 's 10/10/2019 18:50:13'!
test01FirstPlayerIsXAndBoardIsEmpty

	| game |
	
	game _ TerniLapilli new.
	
	self assert: 0 equals: game numberOfXAndOPlayed.
	self assert: true equals: game isPlayingX.
	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 's 10/10/2019 18:47:39'!
test02AtCreationBoardIsEmptyAndOCannotPlay

	| game |
	
	game _ TerniLapilli new.
	
	self assert: 0 equals: game numberOfXAndOPlayed.
	self assert: false equals: game isPlayingO.! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/13/2019 15:21:34'!
test03WhenPlayerXPlaysInAnEmptyBoardItIsCorrectlyModifiedAndNextPlayerIsO

	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 1@1.
	
	self assert: true equals: (game isXInPosition: 1@1).
	self assert: 1 equals: (game numberOfXAndOPlayed).
	self assert: true equals: game isPlayingO.! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:09:13'!
test04APlayerCantPutPiecesWhenItIsNotItsTurn

	| game |
	
	game _ TerniLapilli new.
	
	self
		should: [ game putXAt: 1@2. game putXAt: 2@2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli onePlayerCanOnlyPlayInItsTurnError ].
				
	self assert: false equals: (game isXInPosition: 2@2).! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:34:41'!
test05YouCantPlaceXOrOInAnOccupiedSpot

	| game |
	
	game _ TerniLapilli new.
	
	self
		should: [ game putXAt: 1@1. game putOAt: 1@1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantPlaceXOrOInAnOccupiedSpotError ].
		
		
	self assert: true equals: (game isXInPosition: 1@1).
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:35:35'!
test06YouCantPlaceXOrOOutOfBounds

	| game |
	
	game _ TerniLapilli new.
	
	self
		should: [ game putXAt: 0@0.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantPlaceXOrOOutOfBoundsError ].
		
		
	self assert: 0 equals: game numberOfXAndOPlayed.! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:35:57'!
test07YouCantPlaceMoreThan3XOrO

	| game |
	
	game _ TerniLapilli new.
	
	self
		should: [ game putXAt: 1@1.
				  game putOAt: 1@2.
				  game putXAt: 1@3.
				  game putOAt: 2@1.
				  game putXAt: 2@2.
				  game putOAt: 2@3.
				  game putXAt: 3@1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantPlaceMoreThan3XOrOError. ].
		
	self assert: false equals: (game isXInPosition: 3@1).! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:10:09'!
test08MoveXFromOnePositionToAnother

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
	
	game moveXFrom: 2@2 to: 3@3.
	
	self assert: true equals: (game isXInPosition: 3@3).
	self assert: false equals: (game isXInPosition: 2@2).
	self assert: 6 equals: (game numberOfXAndOPlayed).
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:32:26'!
test09YouCantMoveAnEmptySpace

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 3@3 to: 3@2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveAnEmptySpaceError ].
		
	self assert: false equals: (game isXInPosition: 3@3).	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:32:48'!
test10YouCantMoveToAnOccupiedSpace

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 2@2 to: 2@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveToAnOcuppiedSpaceError].
		
	self assert: true equals: (game isXInPosition: 2@2).
	self assert: false equals: (game isXInPosition: 2@3).	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:33:16'!
test11YouCanOnlyMoveWhenYouHavePlaced3XOrO

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 2@2 to: 2@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveWithLessThan3XOrOOnBoardError].
		
		
	self assert: true equals: (game isXInPosition: 2@2).
	self assert: false equals: (game isXInPosition: 2@3).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:38:21'!
test12YouCanMoveOnlyOnYourTurn

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveOFrom: 2@3 to: 3@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli canOnlyMoveOnYourTurnError].
		
		
	self assert: true equals: (game isOInPosition: 2@3).
	self assert: false equals: (game isOInPosition: 3@3).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:43:22'!
test13YouCanOnlyMoveYourPieces

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 2@3 to: 3@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli canOnlyMoveYourPiecesError].
		
		
	self assert: true equals: (game isOInPosition: 2@3).
	self assert: false equals: (game isOInPosition: 3@3).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/13/2019 17:45:39'!
test14YouCantMoveOutOfBounds

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 2@3 to: 2@4.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveOutOfBoundsError].
		
		
	self assert: true equals: (game isOInPosition: 2@3).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/14/2019 18:35:17'!
test15YouCantMoveToNonNeighbourSpotsInSameRow

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 3@3.
	game putOAt: 2@1.
	game putXAt: 3@1.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 1@1 to: 1@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveToNonNeighbourSpotsError].
		
		
	self assert: false equals: (game isXInPosition: 1@3).	
! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/14/2019 16:58:06'!
test16YouCantMoveToNonNeighbourSpotsInSameColumns

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 1@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 2@3.
		
	self
		should: [ game moveXFrom: 1@1 to: 3@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveToNonNeighbourSpotsError].
		
		
	self assert: false equals: (game isXInPosition: 3@3).	
! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/14/2019 17:20:48'!
test17YouCantMoveInADiagonalInSpotsWhereItIsNotAllowed

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@3.
	self
		should: [ game moveXFrom: 2@3 to: 3@2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveToNonNeighbourSpotsError].
		
		
	self assert: false equals: (game isXInPosition: 3@2).	
! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:28:44'!
test18YouCantMoveMoreThanOneSpotDiagonally

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@3.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@3.
	self
		should: [ game moveXFrom: 1@1 to: 3@3.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli cantMoveToNonNeighbourSpotsError].
		
		
	self assert: false equals: (game isXInPosition: 3@2).	
! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'ST 10/14/2019 18:45:49'!
test19YouWinIfYouPut3XOrOinAColumn

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@2.
	game putXAt: 3@1.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:29:10'!
test20YouWinIfYouPut3XOrOinARow

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:29:15'!
test21YouWinIfYouPut3XOrOinADiagonal

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 2@3.
	game putXAt: 3@3.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:29:25'!
test22YouWinIfYouMoveXOrOAndMake3InARow

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 1@3.
	game putOAt: 3@1.
	game putXAt: 2@2.
	game putOAt: 3@2.
	
	game moveXFrom: 2@2 to: 1@2.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:29:33'!
test23YouWinIfYouMoveXOrOAndMake3InAColumn

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@2.
	game putXAt: 3@1.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:29:41'!
test24YouWinIfYouMoveXOrOAndMake3InADiagonal

	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@2.
	game putXAt: 3@1.
		
	self assert: true equals: (game isOver).
	self assert: true equals: (game playerXWon).	
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:30:07'!
test25YouCantPutIfAPlayerAlreadyWon

	
	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 2@3.
	game putXAt: 3@3.
		
	self
	should: [ game putOAt: 1@3]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli cantPlayAfterEitherPlayerHasWon].
	
	
	self assert: false equals: (game isOInPosition: 1@3).
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:30:15'!
test26YouCantMoveIfAPlayerAlreadyWon

	
	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@3.
	game putXAt: 3@2.
	game putOAt: 3@3.
	
	game moveXFrom: 3@2 to: 3@1.
		
	self
	should: [ game moveOFrom: 1@2 to: 1@3  ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli cantPlayAfterEitherPlayerHasWon].
	
	self assert: true equals: (game isOInPosition: 1@2).
	self assert: false equals: (game isOInPosition: 1@3).
	! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:30:22'!
test27WhenOMovesTheNextPlayerIsX

	
	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@3.
	game putXAt: 3@2.
	game putOAt: 3@3.
	
	game moveXFrom: 3@2 to: 2@2.
	game moveOFrom: 3@3 to: 3@2.
	
	self assert: true equals: game isPlayingX.! !
!JuegoTest methodsFor: 'as yet unclassified' stamp: 'PB 10/16/2019 23:30:26'!
test28WhenXMovesTheNextPlayerIsO

	
	| game |
	
	game _ TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@1.
	game putOAt: 2@3.
	game putXAt: 3@2.
	game putOAt: 3@1.
	
	game moveXFrom: 3@2 to: 3@3.
	

	self assert: true equals: game isPlayingO.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'st 11/4/2019 21:39:33'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:38:14' prior: 50782714!
test01YouCantCheckoutAnEmptyCart

	|cart cashier|
	
	cart _ Cart new.
	cashier _ Cashier new.
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCart ].

	! !
!Cashier methodsFor: 'no messages' stamp: 'st 11/4/2019 20:38:53'!
checkout! !

!methodRemoval: Cashier #checkout stamp: 'st 11/4/2019 21:39:33'!
checkout!
!Cashier methodsFor: 'no messages' stamp: 'st 11/4/2019 20:39:08'!
checkout: aCart! !
!Cashier class methodsFor: 'no messages' stamp: 'st 11/4/2019 20:40:59'!
cannotCheckoutEmptyCartError

	^'Cannot checkout an empty cart'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:41:10' prior: 50783150!
test01YouCantCheckoutAnEmptyCart

	|cart cashier|
	
	cart _ Cart new.
	cashier _ Cashier new.
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:42:23' prior: 50783167!
checkout: aCart

	aCart isEmpty ifTrue: [Error signal: Cashier cannot]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:42:34' prior: 50783188!
checkout: aCart

	aCart isEmpty ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:42:58' prior: 50783194!
checkout: aCart

	[aCart isEmpty] ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:43:27' prior: 50783200!
checkout: aCart

	(aCart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:46:51' prior: 50783176!
test01YouCantCheckoutAnEmptyCart

	|cart cashier|
	
	cart _ Cart createCart: (Array with: 'validBook').
	cashier _ Cashier new.
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:47:16' prior: 50783213!
test01YouCantCheckoutAnEmptyCart

	|cart cashier|
	
	cart _ Cart acceptingItemsOf: (Array with: 'validBook').
	cashier _ Cashier new.
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:52:11'!
test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney

	|cart cashier|
	
	cart _ Cart acceptingItemsOf: (Array with: 'validBook').
	cashier _ Cashier new.
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:54:53' prior: 50783240!
test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney

	|cart cashier|
	
	cart _ Cart acceptingItemsOf: (Array with: 'validBook').
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	
	self assert: 100 equals: (cashier checkout: cart).

	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 20:55:21' prior: 50783206!
checkout: aCart

	(aCart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError].
	
	^100.! !
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:01:49'!
test09subtotalOfEmptyCartIsZero

	| cart |
	
	cart := self createCart.
	
	self assert: 0 equals: cart subtotal.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:02:01'!
subtotal
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:02:15' prior: 50783278!
subtotal
	^0.! !
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:02:37'!
test09SubtotalOfEmptyCartIsZero

	| cart |
	
	cart := self createCart.
	
	self assert: 0 equals: cart subtotal.! !

!methodRemoval: CartTest #test09subtotalOfEmptyCartIsZero stamp: 'st 11/4/2019 21:39:33'!
test09subtotalOfEmptyCartIsZero

	| cart |
	
	cart := self createCart.
	
	self assert: 0 equals: cart subtotal.!
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:04:03'!
test10SubtotalOfOneItemIsCorrect

	| cart |
	
	cart := self createCart.
	
	self assert: 10 equals: cart subtotal.! !
!Cart methodsFor: 'initialization' stamp: 'st 11/4/2019 21:05:58' prior: 50782551!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !

!classDefinition: #Cart category: #TusLibros stamp: 'st 11/4/2019 21:39:33'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'st 11/4/2019 21:39:33'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'st 11/4/2019 21:39:33'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'st 11/4/2019 21:39:33'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'support' stamp: 'st 11/4/2019 21:11:36' prior: 50782692!
defaultCatalog
	
	| catalog |

	catalog _ Dictionary new.
	catalog add: 'validBook'->100.	
	
	^catalog.! !
!Cart methodsFor: 'assertions' stamp: 'st 11/4/2019 21:13:44' prior: 50782538!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:14:07' prior: 50783297!
test10SubtotalOfOneItemIsCorrect

	| cart |
	
	cart := self createCart.
	
	self assert: 100 equals: cart subtotal.! !
!Cart methodsFor: 'queries' stamp: 'st 11/4/2019 21:17:58' prior: 50783282!
subtotal

	^ items inject: 0
	into: [:item :subtotal | subtotal + catalog at: item].! !
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:18:56' prior: 50783350!
test10SubtotalOfOneItemIsCorrect

	| cart |
	
	cart := self createCart.
	cart add: 'validBook'.
	
	self assert: 100 equals: cart subtotal.! !
!Cart methodsFor: 'queries' stamp: 'st 11/4/2019 21:19:14' prior: 50783357!
subtotal

	^ items inject: 0
	into: [:item :subtotal | subtotal + (catalog at: item)].! !
!Cart methodsFor: 'queries' stamp: 'st 11/4/2019 21:19:40' prior: 50783370!
subtotal

	^ items inject: 0
	into: [:subtotal :item | subtotal + (catalog at: item)].! !
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:20:41'!
test11SubtotalOfMoreThanItemIsCorrect

	| cart |
	
	cart := self createCart.
	cart add: 'validBook'.
	
	self assert: 200 equals: cart subtotal.! !
!CartTest methodsFor: 'tests' stamp: 'st 11/4/2019 21:20:57' prior: 50783381!
test11SubtotalOfMoreThanItemIsCorrect

	| cart |
	
	cart := self createCart.
	cart add: 'validBook'.
	cart add: 'validBook'.
	
	self assert: 200 equals: cart subtotal.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:23:14' prior: 50783255!
test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney

	|cart cashier priceList|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	
	self assert: 100 equals: (cashier checkout: cart).

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:24:07'!
test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney

	|cart cashier priceList|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	cart add: 'validBook'.
	
	self assert: 200 equals: (cashier checkout: cart).

	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:24:20' prior: 50783266!
checkout: aCart

	(aCart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError].
	
	^ aCart subtotal.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:41:11'!
test04CreditCardMustNotBeExpiredForCheckout

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:42:36' prior: 50783432!
test04CreditCardMustNotBeExpiredForCheckout

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:42:43' prior: 50783437!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	cart add: 'validBook'.
	
	self assert: 200 equals: (cashier checkout: cart).
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:43:26' prior: 50783442!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	cart add: 'validBook'.
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnEmptyCreditCard ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:44:42' prior: 50783455!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	cart add: 'validBook'.
	
	self should: [ cashier checkout]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnEmptyCreditCard ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:44:46' prior: 50783473!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	cart add: 'validBook'.
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnEmptyCreditCard ].! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:46:43'!
for: aCart with: aCreditCard on: aDate

	^self new initializeFor: aCart with: aCreditCard on: aDate.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:47:10'!
initializeFor: aCart with: aCreditCard on: aDate

	! !

Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'st 11/4/2019 21:47:19'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:47:42' prior: 50783514!
initializeFor: aCart with: aCreditCard on: aDate

	cart _ aCart.
	creditCard _ aCreditCard.
	date _ aDate.	! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'st 11/4/2019 21:48:47'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:48:44' prior: 50783491!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	creditCard _ CreditCard new.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date now).
	
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnEmptyCreditCard ].! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:49:40'!
cannotCheckoutWithAnExpiredCreditCardError

	^'The credit card that you provided has expired'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:49:44' prior: 50783562!
cannotCheckoutWithAnExpiredCreditCardError

	^'The credit card that you provided has expired'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:50:04'!
checkout

	(cart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError].
	
	^ cart subtotal.! !

!methodRemoval: Cashier #checkout: stamp: 'st 11/4/2019 21:50:10'!
checkout: aCart

	(aCart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError].
	
	^ aCart subtotal.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:50:29' prior: 50783227!
test01YouCantCheckoutAnEmptyCart

	|cart cashier creditCard|
	
	cart _ Cart acceptingItemsOf: (Array with: 'validBook').
	cashier _ Cashier new.
	
	creditCard _ CreditCard new.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date now).
	
	
	self should: [ cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:50:32' prior: 50783588!
test01YouCantCheckoutAnEmptyCart

	|cart cashier creditCard|
	
	cart _ Cart acceptingItemsOf: (Array with: 'validBook').
	cashier _ Cashier new.
	
	creditCard _ CreditCard new.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date now).
	
	
	self should: [ cashier checkout]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:50:40' prior: 50783398!
test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney

	|cart cashier priceList|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	
	self assert: 100 equals: (cashier checkout).

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:50:50' prior: 50783411!
test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney

	|cart cashier priceList|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cashier _ Cashier new.
	
	cart add: 'validBook'.
	cart add: 'validBook'.
	
	self assert: 200 equals: (cashier checkout).

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:51:01' prior: 50783544!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	creditCard _ CreditCard new.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date now).
	
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnExpiredCreditCard ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:51:18' prior: 50783649!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	creditCard _ CreditCard new.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date now).
	
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnExpiredCreditCardError ].! !

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 21:51:22'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:51:54' prior: 50783668!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	creditCard _ CreditCard new.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date today).
	
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnExpiredCreditCardError ].! !

Date today!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:52:19' prior: 50783690!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	creditCard _ CreditCard new.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date today).
	
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnExpiredCreditCardError ].! !
!CreditCard class methodsFor: 'no messages' stamp: 'st 11/4/2019 21:53:21'!
with: aCreditCardNumber and: anExpirationDate withOwner: aName! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:53:28' prior: 50783727!
with: aCreditCardNumber and: anExpirationDate withOwner: aName

	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:54:26' prior: 50783733!
with: aCreditCardNumber and: anExpirationDate withOwner: aName

	^self new initializeFor: aCreditCardNumber with: anExpirationDate owner: aName.! !
!CreditCard methodsFor: 'no messages' stamp: 'st 11/4/2019 21:54:37'!
initializeFor: aCreditCardNumber with: anExpirationDate owner: aName

	! !

Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'st 11/4/2019 21:54:55'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:55:44' prior: 50783746!
initializeFor: aCreditCardNumber with: anExpirationDate owner: aName

	number _ aCreditCardNumber.
	expirationDate _ anExpirationDate.
	ownerName _ aName.

	! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'st 11/4/2019 21:56:12'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'st 11/4/2019 21:56:41'!
test01CreditCardNumberMustHaveExactly16Digits! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:57:29' prior: 50783783!
test01CreditCardNumberMustHaveExactly16Digits

	|creditCard|
	
! !

01/02/2020!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:58:44' prior: 50783788!
test01CreditCardNumberMustHaveExactly16Digits

	|creditCard|
	
	creditCard _ CreditCard with: 1234123412341234 and: (Date today) withOwner: 'peter naborski'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 21:59:39'!
test01CreditCardNumberWithLessThan16DigitsRaisesError

	|creditCard|
	
	creditCard _ CreditCard with: 1234123412341234 and: (Date today) withOwner: 'peter naborski'.! !

!methodRemoval: CreditCardTest #test01CreditCardNumberMustHaveExactly16Digits stamp: 'st 11/4/2019 21:59:39'!
test01CreditCardNumberMustHaveExactly16Digits

	|creditCard|
	
	creditCard _ CreditCard with: 1234123412341234 and: (Date today) withOwner: 'peter naborski'.!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:00:03' prior: 50783802!
test01CreditCardNumberWithLessThan16DigitsRaisesError

	|creditCard|
	
	creditCard _ CreditCard with: 123412341234123 and: (Date today) withOwner: 'peter naborski'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:00:55' prior: 50783819!
test01CreditCardNumberWithLessThan16DigitsRaisesError

	|creditCard|
	
	
	self should: [ creditCard _ CreditCard with: 123412341234123 and: (Date today) withOwner: 'peter naborski'. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = CreditCard creditCardNumberMustHave16Digits ].! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:01:29'!
creditCardNumberMustHave16DigitsError

	^'Credit card number must have 16 digits'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:01:44' prior: 50783828!
test01CreditCardNumberWithLessThan16DigitsRaisesError

	|creditCard|
	
	
	self should: [ creditCard _ CreditCard with: 123412341234123 and: (Date today) withOwner: 'peter naborski'. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = CreditCard creditCardNumberMustHave16DigitsError ].! !

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:01:49'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:02:19' prior: 50783764!
initializeFor: aCreditCardNumber with: anExpirationDate owner: aName

	self validateNumberLength.
	
	number _ aCreditCardNumber.
	expirationDate _ anExpirationDate.
	ownerName _ aName.

	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:02:44'!
validateNumberLength
! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:02:55' prior: 50783866!
initializeFor: aCreditCardNumber with: anExpirationDate owner: aName


	number _ aCreditCardNumber.
	
	self validateNumberLength.	
	
	expirationDate _ anExpirationDate.
	ownerName _ aName.

	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:03:19' prior: 50783879!
initializeFor: aCreditCardNumber with: anExpirationDate owner: aName

	self validateNumberLength: aCreditCardNumber.
	
	number _ aCreditCardNumber.
	expirationDate _ anExpirationDate.
	ownerName _ aName.

	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:03:25'!
validateNumberLength: aCreditCardNumber
! !

!methodRemoval: CreditCard #validateNumberLength stamp: 'st 11/4/2019 22:03:28'!
validateNumberLength
!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:03:36' prior: 50783898!
validateNumberLength: aCreditCardNumber
	
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:03:59' prior: 50783906!
validateNumberLength: aCreditCardNumber
	
	(aCreditCardNumber < 16) ifTrue: [Error signal: CreditCard cannotCheckoutEmptyCartError].! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:04:17' prior: 50783911!
validateNumberLength: aCreditCardNumber
	
	(aCreditCardNumber < 16) ifTrue: [Error signal: CreditCard creditCardNumberMustHave16DigitsError].! !

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:04:17'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:04:17'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:04:21'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:06:12' prior: 50783919!
validateNumberLength: aCreditCardNumber
	
	((aCreditCardNumber asString length) < 16) ifTrue: [Error signal: CreditCard creditCardNumberMustHave16DigitsError].! !

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:06:12'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:06:12'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:06:18' prior: 50783938!
validateNumberLength: aCreditCardNumber
	
	((aCreditCardNumber asString size) < 16) ifTrue: [Error signal: CreditCard creditCardNumberMustHave16DigitsError].! !

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:06:18'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:06:33'!
test02CreditCardNumberWithMoreThan16DigitsRaisesError

	|creditCard|
	
	
	self should: [ creditCard _ CreditCard with: 12341234123412345 and: (Date today) withOwner: 'peter naborski'. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = CreditCard creditCardNumberMustHave16DigitsError ].! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:06:45' prior: 50783966!
test02CreditCardNumberWithMoreThan16DigitsRaisesError
	
	self should: [ CreditCard with: 12341234123412345 and: (Date today) withOwner: 'peter naborski'. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = CreditCard creditCardNumberMustHave16DigitsError ].! !

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsRaisesError stamp: 'st 11/4/2019 22:06:47'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:06:58' prior: 50783848!
test01CreditCardNumberWithLessThan16DigitsRaisesError

	self should: [ CreditCard with: 123412341234123 and: (Date today) withOwner: 'peter naborski'. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = CreditCard creditCardNumberMustHave16DigitsError ].! !

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:07:01'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:07:01'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsRaisesError stamp: 'st 11/4/2019 22:07:01'!
FAILURE!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsRaisesError stamp: 'st 11/4/2019 22:07:01'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:07:06'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:07:06'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsRaisesError stamp: 'st 11/4/2019 22:07:06'!
FAILURE!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsRaisesError stamp: 'st 11/4/2019 22:07:06'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:07:39' prior: 50783954!
validateNumberLength: aCreditCardNumber
	
	((aCreditCardNumber asString size) ~=16) ifTrue: [Error signal: CreditCard creditCardNumberMustHave16DigitsError].! !

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:07:39'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsRaisesError stamp: 'st 11/4/2019 22:07:39'!
PASSED!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:07:55'!
FAILURE!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:07:57'!
FAILURE!

----SNAPSHOT----(4 November 2019 22:08:21) TusLibros.image priorSource: 14383547!
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:08:49' prior: 50783575!
checkout

	(cart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError].
	
	
	^ cart subtotal.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:13:26'!
isExpiredOn: aDate

	expirationDate year < aDate year ifTrue: [^ true].
	expirationDate month < aDate month ifTrue:[^ true].
	^false.
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:13:49' prior: 50784072!
isExpiredOn: aDate

	(expirationDate year < aDate year) ifTrue: [^ true].
	(expirationDate month < aDate month) ifTrue:[^ true].
	^false.
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:13:54' prior: 50784080!
isExpiredOn: aDate

	(expirationDate year < aDate year) ifTrue: [^ true].
	(expirationDate month < aDate month) ifTrue:[^ true].
	
	^ false.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:14:52' prior: 50784066!
checkout

	(cart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError].
	(creditCard isExpiredOn: (Date today)) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError]
	
	^ cart subtotal.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:15:04' prior: 50784096!
checkout

	(cart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError].
	(creditCard isExpiredOn: (Date today)) ifTrue: [Error signal: Cashier cannotCheckoutWithAnExpiredCreditCardError]
	
	^ cart subtotal.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:15:06' prior: 50784106!
checkout

	(cart isEmpty) ifTrue: [Error signal: Cashier cannotCheckoutEmptyCartError].
	(creditCard isExpiredOn: (Date today)) ifTrue: [Error signal: Cashier cannotCheckoutWithAnExpiredCreditCardError].
	
	^ cart subtotal.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:15:13' prior: 50783709!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	creditCard _ CreditCard new.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date today).
	
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnExpiredCreditCardError ].! !

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:15:13'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:15:57' prior: 50784127!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cart add: 'validBook'.	
	creditCard _ CreditCard new.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date today).
	
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnExpiredCreditCardError ].! !

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:15:58'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:16:56' prior: 50784088!
isExpiredOn: aDate

	((expirationDate year) < (aDate year)) ifTrue: [^ true].
	((expirationDate month) < (aDate month)) ifTrue:[^ true].
	
	^ false.
	! !

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:16:56'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsRaisesError stamp: 'st 11/4/2019 22:16:56'!
PASSED!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:17:03'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:18:02' prior: 50784149!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cart add: 'validBook'.	
	creditCard _ CreditCard with: 1234123412341235 and: (Date newDay: 12 month: #July year: 1999) withOwner: 'peter naborski'.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date today).
	
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnExpiredCreditCardError ].! !

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:18:02'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:18:42' prior: 50784172!
isExpiredOn: aDate

	((expirationDate year) < (aDate year)) ifTrue: [^ true].
	((expirationDate month) < (aDate month)) ifTrue:[^ true].
	
	^ false.
	
	! !

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:18:58'!
ERROR!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:19:09'!
ERROR!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:19:16'!
ERROR!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:19:26'!
ERROR!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:19:35'!
ERROR!

(Date today) year!

Date today year!

Date today year value!

	Year!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:22:13' prior: 50784191!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cart add: 'validBook'.	
	creditCard _ CreditCard with: 123412312341235 and: (Date newDay: 12 month: #July year: 1999) withOwner: 'peter naborski'.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date today).
	
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnExpiredCreditCardError ].! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:22:15' prior: 50784217!
isExpiredOn: aDate

	((expirationDate yearNumber) < (aDate yearNumber)) ifTrue: [^ true].
	((expirationDate monthNumber) < (aDate monthNumber)) ifTrue:[^ true].
	
	^ false.
	
! !

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:22:15'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsRaisesError stamp: 'st 11/4/2019 22:22:15'!
PASSED!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:22:21'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:22:39' prior: 50784244!
test04CreditCardMustNotBeExpiredForCheckout

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	cart add: 'validBook'.	
	creditCard _ CreditCard with: 1234123123412355 and: (Date newDay: 12 month: #July year: 1999) withOwner: 'peter naborski'.
	
	
	cashier _ Cashier for: cart with: creditCard on: (Date today).
	
	
	self should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutWithAnExpiredCreditCardError ].! !

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:22:40'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 22:22:40'!
ERROR!

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:22:40'!
ERROR!

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:22:40'!
ERROR!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:22:40'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:23:21' prior: 50783635!
test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	creditCard _ CreditCard with: 1234123123412355 and: (Date newDay: 12 month: #July year: 2200) withOwner: 'peter naborski'.
	
	cashier _ Cashier for: cart with: creditCard on: (Date today).
	
	cart add: 'validBook'.
	cart add: 'validBook'.
	
	self assert: 200 equals: (cashier checkout).

	! !

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:23:22'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:24:10' prior: 50784267!
isExpiredOn: aDate

	((expirationDate yearNumber) < (aDate yearNumber)) ifTrue: [^ true].
	((expirationDate monthIndex) < (aDate monthIndex)) ifTrue:[^ true].
	
	^ false.
	
! !

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:24:10'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsRaisesError stamp: 'st 11/4/2019 22:24:10'!
PASSED!

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:24:14'!
ERROR!

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:24:31'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:25:01' prior: 50784350!
isExpiredOn: aDate

	((expirationDate yearNumber) < (aDate yearNumber)) ifTrue: [^ true].
	((expirationDate monthIndex) < (aDate monthIndex)) ifTrue:[^ true].
	
	^ false.
	
! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:25:52' prior: 50784375!
isExpiredOn: aDate

	((expirationDate yearNumber) > (aDate yearNumber)) ifTrue: [^ false].
	((expirationDate monthIndex) > (aDate monthIndex)) ifTrue:[^ false].
	
	^ true.
	
! !

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsRaisesError stamp: 'st 11/4/2019 22:25:53'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsRaisesError stamp: 'st 11/4/2019 22:25:53'!
PASSED!

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:25:57'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 22:25:57'!
ERROR!

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:25:57'!
ERROR!

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:25:57'!
PASSED!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:25:57'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:26:10' prior: 50783622!
test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney

	|cart cashier priceList creditCard|
	
	priceList _ Dictionary new.
	priceList add: 'validBook' -> 100.		
	cart _ Cart acceptingItemsOf: priceList.
	creditCard _ CreditCard with: 1234123123412355 and: (Date newDay: 12 month: #July year: 2200) withOwner: 'peter naborski'.
	
	cashier _ Cashier for: cart with: creditCard on: (Date today).
	
	cart add: 'validBook'.
	
	self assert: 100 equals: (cashier checkout).

	! !

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:26:15'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 22:26:15'!
ERROR!

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:26:15'!
PASSED!

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:26:15'!
PASSED!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:26:15'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 22:26:15'!
ERROR!

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:26:20'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 22:26:20'!
ERROR!

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:26:20'!
PASSED!

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:26:20'!
PASSED!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:26:20'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 22:26:20'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'st 11/4/2019 22:26:51' prior: 50783605!
test01YouCantCheckoutAnEmptyCart

	|cart cashier creditCard|
	
	cart _ Cart acceptingItemsOf: (Array with: 'validBook').
	cashier _ Cashier new.
	
	creditCard _ CreditCard with: 1234123123412355 and: (Date newDay: 12 month: #July year: 2200) withOwner: 'peter naborski'.
	
	cashier _ Cashier for: cart with: creditCard on: (Date today).
	
	
	self should: [ cashier checkout]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier cannotCheckoutEmptyCartError ].

	! !

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 22:26:52'!
PASSED!

!testRun: #CashierTest #test01YouCantCheckoutAnEmptyCart stamp: 'st 11/4/2019 22:26:52'!
PASSED!

!testRun: #CashierTest #test02CheckingOutASingleItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:26:52'!
PASSED!

!testRun: #CashierTest #test03CheckingOutMoreThanOneItemReturnsTheCorrectAmountOfMoney stamp: 'st 11/4/2019 22:26:52'!
PASSED!

!testRun: #CashierTest #test04CreditCardMustNotBeExpiredForCheckout stamp: 'st 11/4/2019 22:26:52'!
PASSED!

----SNAPSHOT----(4 November 2019 22:27:23) TusLibros.image priorSource: 14477200!

----SNAPSHOT----(4 November 2019 22:27:40) TusLibros.image priorSource: 14491709!

----STARTUP---- (9 November 2019 09:37:46) as /home/stucci/Desktop/linux64/TusLibros.image!


!classRemoval: #CreditCard stamp: 'st 11/9/2019 09:37:58'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'st 11/9/2019 09:37:59'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'st 11/9/2019 09:37:59'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'st 11/9/2019 09:37:59'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'st 11/9/2019 09:37:59'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'st 11/9/2019 09:38:00'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/stucci/Desktop/linux64/TusLibros-33.st----!

----QUIT----(9 November 2019 09:47:53) TusLibros.image priorSource: 14491792!

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: #TusLibros stamp: 'st 11/9/2019 09:51:24'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: #TusLibros stamp: 'st 11/9/2019 09:51:32'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 09:55:45'!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	! !

!classDefinition: #InnerInterface category: #TusLibros stamp: 'st 11/9/2019 09:59:37'!
Object subclass: #InnerInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 09:59:23' prior: 50785140!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	innerInterface _ InnerInterface new.
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:01:25' prior: 50785152!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface new.
	
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:01:35'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:02:42'!
listCart: aCartId

	^ OrderedCollection new.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:02:43'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:07:04'!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface new.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:07:05'!
FAILURE!

Object subclass: #NameOfSubclass
	instanceVariableNames: 'cartList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NameOfSubclass category: #TusLibros stamp: 'st 11/9/2019 10:09:04'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'cartList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #NameOfSubclass
	instanceVariableNames: 'cartDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NameOfSubclass category: #TusLibros stamp: 'st 11/9/2019 10:09:10'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'cartDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #NameOfSubclass stamp: 'st 11/9/2019 10:09:21'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'cartDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'st 11/9/2019 10:09:25'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:10:17' prior: 50785171!
listCart: aCartId

	^ cartDicc at: aCartId.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:11:04' prior: 50785179!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface new.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterface methodsFor: 'access' stamp: 'st 11/9/2019 10:11:28'!
cartDicc

	^ cartDicc.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:12:39' prior: 50785239!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface new.
	innerInterface cartDicc add: 1 -> (OrderedCollection with: 1).
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:12:52' prior: 50785159!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface new.
	innerInterface cartDicc add: 1 -> (OrderedCollection new).
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:12:53'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:12:59' prior: 50785266!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface new.
	(innerInterface cartDicc) add: 1 -> (OrderedCollection new).
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:13:04' prior: 50785253!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface new.
	(innerInterface cartDicc) add: 1 -> (OrderedCollection with: 1).
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:13:04'!
ERROR!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:13:19'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:13:45' prior: 50785292!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc|
	
	innerInterface _ InnerInterface new.
	cartDicc _ innerInterface cartDicc.
	cartDicc add: 1 -> (OrderedCollection with: 1).
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:13:45'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:14:12' prior: 50785313!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc|
	
	innerInterface _ InnerInterface new.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:(1 -> (OrderedCollection with: 1)).
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:14:12'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:14:43' prior: 50785331!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc|
	
	innerInterface _ InnerInterface new.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:(1 -> (OrderedCollection with: 1)); yourself.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:14:43'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:14:53' prior: 50785349!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc|
	
	innerInterface _ InnerInterface new.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:14:54'!
ERROR!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:14:58'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:15:26' prior: 50785281!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface new.
	(innerInterface cartDicc) add: 1 -> (OrderedCollection new); yourself.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 10:16:30'!
initialize

	cartDicc _ Dictionary new.! !
!InnerInterface class methodsFor: 'initialize' stamp: 'st 11/9/2019 10:30:56'!
create

	self new initialize.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:38:18' prior: 50785367!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc|
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:38:24' prior: 50785389!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.
	(innerInterface cartDicc) add: 1 -> (OrderedCollection new); yourself.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:38:24'!
ERROR!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:39:13'!
ERROR!
!InnerInterface class methodsFor: 'initialize' stamp: 'st 11/9/2019 10:39:35' prior: 50785404!
create

	^self new initialize.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:39:37'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:39:37'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:40:35'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:40:35'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:40:35'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:40:40' prior: 50785408!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:42:46'!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:43:26' prior: 50785478!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	cartDicc add:2->(OrderedCollection with: 4 with: 5); yourself.
	
	cartItems _ OrderedCollection with: 4 with: 5.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 10:43:26'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:43:26'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:43:26'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 10:43:26'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:45:51'!
test03ListingANonExistingCartReturnsError

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	cartItems _ OrderedCollection with: 4 with: 5.
		
	self assert: cartItems equals: (innerInterface listCart: 5).
	
	! !

!testRun: #InnerInterfaceTest #test03ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:45:52'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:46:04'!
test04ListingANonExistingCartReturnsError

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	cartItems _ OrderedCollection with: 4 with: 5.
		
	self assert: cartItems equals: (innerInterface listCart: 5).
	
	! !

!methodRemoval: InnerInterfaceTest #test03ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:46:04'!
test03ListingANonExistingCartReturnsError

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	cartItems _ OrderedCollection with: 4 with: 5.
		
	self assert: cartItems equals: (innerInterface listCart: 5).
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:47:37' prior: 50785542!
test04ListingANonExistingCartReturnsError

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	cartItems _ OrderedCollection with: 4 with: 5.
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = innerInterface nonExistingCartError.].
	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:47:50' prior: 50785570!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = innerInterface nonExistingCartError.].
	
	
	! !

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:47:52'!
ERROR!
!InnerInterface class methodsFor: 'exception' stamp: 'st 11/9/2019 10:48:33'!
nonExistingCartError

	^'The specified cart does not exists'.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:48:34'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:48:34'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 10:48:34'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:48:34'!
ERROR!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:48:34'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:48:55' prior: 50785588!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:48:56'!
FAILURE!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:49:11' prior: 50785234!
listCart: aCartId

	^ cartDicc at: aCartId ifAbsent: [].! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:49:28' prior: 50785651!
listCart: aCartId

	^ cartDicc at: aCartId ifAbsent: [self error: self nonExistingCartError].! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:49:28'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:49:28'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 10:49:28'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:49:28'!
ERROR!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:49:28'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:49:41' prior: 50785656!
listCart: aCartId

	^ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:49:42'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:49:42'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 10:49:42'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:49:42'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:50:48'!
test05CreatingACartReturnsEmptyCollection

	| innerInterface cartDicc |
	
	innerInterface _ InnerInterface create.

	

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:50:55' prior: 50785703!
test05CreatingACartReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:53:36' prior: 50785710!
test05CreatingACartReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 1 with: '123456'.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 10:53:40'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:54:15'!
createCart: aClientId with: aPassword

	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:54:17'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:54:17'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 10:54:17'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:54:17'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 10:54:17'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 10:54:17'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:58:33' prior: 50785731!
createCart: aClientId with: aPassword

	cartDicc add: 1->(OrderedCollection new)! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 10:58:34'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 10:58:34'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 10:58:34'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 10:58:34'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 10:58:34'!
PASSED!

----End fileIn of /home/stucci/Desktop/2019-2c/23-Portfolio/Portfolio-Solucion.st----!

!classRemoval: #Withdraw stamp: 'st 11/9/2019 11:06:34'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'st 11/9/2019 11:06:34'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'st 11/9/2019 11:06:34'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'st 11/9/2019 11:06:35'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'st 11/9/2019 11:06:35'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'st 11/9/2019 11:06:35'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'st 11/9/2019 11:06:36'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'st 11/9/2019 11:06:36'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!CartTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:28:34'!
test09ListingAnEmptyCartReturnsEmptyCollection

	| cart |
	
	cart := testObjectsFactory createCart.
	

	self assert: (OrderedCollection new) equals: cart listItems.! !

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'st 11/9/2019 11:28:35'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'st 11/9/2019 11:29:22'!
listItems
! !
!Cart methodsFor: 'queries' stamp: 'st 11/9/2019 11:29:36' prior: 50786545!
listItems

	^ items.! !
!Cart methodsFor: 'queries' stamp: 'st 11/9/2019 11:30:02' prior: 50786548!
listItems

	^ items asOrderedCollection.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/9/2019 11:30:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/9/2019 11:30:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/9/2019 11:30:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/9/2019 11:30:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/9/2019 11:30:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/9/2019 11:30:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/9/2019 11:30:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/9/2019 11:30:02'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'st 11/9/2019 11:30:02'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'st 11/9/2019 11:30:24' prior: 50786552!
listItems

	^ items asOrderedCollection.! !
!CartTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:30:41'!
test10ListingANonEmptyCartReturnsItemCollection

	| cart |
	
	cart := testObjectsFactory createCart.
	

	self assert: (OrderedCollection new) equals: cart listItems.! !
!CartTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:31:38' prior: 50786589!
test10ListingANonEmptyCartReturnsItemCollection

	| cart |
	
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.

	self assert: (OrderedCollection with: testObjectsFactory itemSellByTheStore) equals: cart listItems.! !

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'st 11/9/2019 11:31:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'st 11/9/2019 11:31:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'st 11/9/2019 11:31:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'st 11/9/2019 11:31:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'st 11/9/2019 11:31:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'st 11/9/2019 11:31:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'st 11/9/2019 11:31:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'st 11/9/2019 11:31:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'st 11/9/2019 11:31:39'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'st 11/9/2019 11:31:39'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'st 11/9/2019 11:31:39'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:33:29' prior: 50785631!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc |
	
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:33:49' prior: 50785422!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.
	(innerInterface cartDicc) add: 1 -> (testObjectsFactory createCart); yourself.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:33:50'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 11:34:39' prior: 50785681!
listCart: aCartId

	| cart |
	cart _ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].
	
	^ cart listItems.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 11:34:42' prior: 50786675!
listCart: aCartId

	| cart |
	
	cart _ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].
	
	^ cart listItems.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:34:43'!
ERROR!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 11:34:43'!
ERROR!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:34:43'!
ERROR!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:34:43'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:34:43'!
ERROR!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:34:56'!
ERROR!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:35:06'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:35:23' prior: 50786660!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface cart |
	
	cart _ testObjectsFactory createCart.
	innerInterface _ InnerInterface create.
	(innerInterface cartDicc) add: 1 -> cart; yourself.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:35:25'!
ERROR!
!InnerInterfaceTest methodsFor: 'setup' stamp: 'st 11/9/2019 11:35:45'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:36:00'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:36:00'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 11:36:00'!
ERROR!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:36:00'!
ERROR!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:36:00'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:36:00'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:37:38' prior: 50785465!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc cart |
	
	cart _ testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	
	cartDicc add:1->cart; yourself.
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 11:37:40'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:37:40'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 11:37:40'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:37:40'!
ERROR!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:37:40'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:37:40'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:39:49' prior: 50785492!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems cartDicc cart1 cart2 |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	
	
	cart1 _ testObjectsFactory createCart.
	cart1 add: testObjectsFactory itemSellByTheStore.
	cart2 _ testObjectsFactory createCart.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cartDicc add:1->cart1; yourself.
	cartDicc add:2->cart2; yourself.
	
		
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 11:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:39:53'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:39:53'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:40:03' prior: 50786801!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems cartDicc cart1 cart2 |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	
	
	cart1 _ testObjectsFactory createCart.
	cart1 add: testObjectsFactory itemSellByTheStore.
	cart2 _ testObjectsFactory createCart.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cartDicc add:1->cart1; yourself.
	cartDicc add:2->cart2; yourself.
		
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:40:53'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 11:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:41:05'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:41:05'!
ERROR!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:42:13'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:44:35'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:44:36'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:44:39' prior: 50786853!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems cartDicc cart1 cart2 |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	
	cart1 _ testObjectsFactory createCart.
	cart1 add: testObjectsFactory itemSellByTheStore.
	cart2 _ testObjectsFactory createCart.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cartDicc add:1->cart1; yourself.
	cartDicc add:2->cart2; yourself.
		
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:44:39'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:45:15' prior: 50786644!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc cart1 |
	
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cart1 _ testObjectsFactory createCart.

	
	cartDicc add:1->cart1; yourself.
	
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:45:17'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:45:17'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 11:45:17'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:45:17'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:45:17'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:45:17'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:45:17'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:45:24' prior: 50786952!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc cart1 |
	
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cart1 _ testObjectsFactory createCart.

	
	cartDicc add:1->cart1; yourself.
	
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:45:27' prior: 50786995!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc cart1 |
	
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cart1 _ testObjectsFactory createCart.

	
	cartDicc add:1->cart1; yourself.	
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:45:27'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:45:27'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 11:45:27'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:45:27'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:45:27'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:45:27'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:45:27'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 11:46:10' prior: 50785758!
createCart: aClientId with: aPassword

	cartDicc add: 1->(Cart new)! !

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'st 11/9/2019 11:47:18'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 11:47:31' prior: 50787055!
createCart: aClientId with: aPassword

	cartDicc add: 1->(testObjectsFactory createCart)! !

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:47:42'!
ERROR!
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 11:48:04' prior: 50785400!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:48:04'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 11:48:04'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:48:04'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:48:04'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:48:04'!
PASSED!

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'st 11/9/2019 11:49:28'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 11:49:49' prior: 50787083!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	lastId _ 1.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 11:50:21' prior: 50787073!
createCart: aClientId with: aPassword

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 11:50:22'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 11:50:22'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 11:50:22'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 11:50:22'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 11:50:22'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:59:59'!
test06TryingToCreateACartWithANonExistingUserReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 3 with: '123456'.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:00:30' prior: 50787154!
test06TryingToCreateACartWithANonExistingUserReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	
	
	self 
	should: [ innerInterface createCart: 3 with: '123456'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingUserCartError.].

	
	
	! !
!InnerInterface class methodsFor: 'exception' stamp: 'st 11/9/2019 12:01:01'!
nonExistingUserCartError

	^'The specified user does not exists'.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:01:07'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:01:07'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:01:07'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:01:07'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:01:07'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:01:07'!
FAILURE!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:01:07'!
FAILURE!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:01:44' prior: 50787165!
test06TryingToCreateACartWithANonExistingUserReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	self 
	should: [ innerInterface createCart: 3 with: '123456'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingUserCartError.].

	
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:02:20' prior: 50787128!
createCart: aClientId with: aPassword

	aClientId = 3 ifTrue: [].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:02:51' prior: 50787226!
createCart: aClientId with: aPassword

	aClientId = 3 ifTrue: [self error: InnerInterface nonExistingUserError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:03:13'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:03:13'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:03:13'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:03:13'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:03:13'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:03:13'!
ERROR!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:03:13'!
ERROR!
!InnerInterface class methodsFor: 'exception' stamp: 'st 11/9/2019 12:03:37'!
nonExistingUserError

	^'The specified user does not exists'.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:03:48' prior: 50787212!
test06TryingToCreateACartWithANonExistingUserReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	self 
	should: [ innerInterface createCart: 3 with: '123456'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingUserError.].

	
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:03:54'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:03:54'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:03:54'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:03:54'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:03:54'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:03:54'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:05:17'!
test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:05:29' prior: 50787312!
test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:06:53' prior: 50787320!
test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '123456'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:06:53'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:06:53'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:06:53'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:06:53'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:06:53'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:06:53'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:06:53'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:06:53'!
PASSED!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:08:04' prior: 50787234!
createCart: aClientId with: aPassword

	aClientId = 1 ifFalse: [self error: InnerInterface nonExistingUserError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:08:05'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:08:05'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:08:05'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:08:05'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:08:05'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:08:05'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:08:05'!
ERROR!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:08:05'!
ERROR!

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'st 11/9/2019 12:08:50'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 12:09:11' prior: 50787122!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Collection with: 1 with: 2.
	lastId _ 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:09:12'!
ERROR!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:09:12'!
ERROR!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:09:12'!
ERROR!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:09:12'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:09:12'!
ERROR!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:09:12'!
ERROR!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:09:12'!
ERROR!
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 12:09:38' prior: 50787428!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ OrderedCollection with: 1 with: 2.
	lastId _ 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:09:39'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:09:39'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:09:39'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:09:39'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:09:39'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:09:39'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:09:39'!
ERROR!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:09:39'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:10:13' prior: 50787373!
createCart: aClientId with: aPassword

	(users includes: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:10:13'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:10:13'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:10:13'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:10:13'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:10:13'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:10:13'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:10:13'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:11:11'!
test07TryingToCreateACartWithAWrongPasswordReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '123'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:11:22'!
test08TryingToCreateACartWithAWrongPasswordReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '123'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !

!methodRemoval: InnerInterfaceTest #test07TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:11:22'!
test07TryingToCreateACartWithAWrongPasswordReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '123'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:11:53' prior: 50787551!
test08TryingToCreateACartWithAWrongPasswordReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	
	self 
	should: [ innerInterface createCart: 2 with: '123'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface wrongPasswordError.].

	
	
	! !
!InnerInterface class methodsFor: 'exception' stamp: 'st 11/9/2019 12:12:12'!
wrongPasswordError

	^'Wrong Password'.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:12:14'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:12:14'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:12:14'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:12:14'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:12:14'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:12:14'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:12:14'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:12:14'!
FAILURE!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:12:14'!
FAILURE!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:13:09' prior: 50787503!
createCart: aClientId with: aPassword

	(users includes: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     (aPassword ~= '123456') ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:13:09'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:13:09'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:13:09'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:13:09'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:13:09'!
ERROR!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:13:09'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:13:09'!
ERROR!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:13:09'!
FAILURE!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:13:19' prior: 50787627!
createCart: aClientId with: aPassword

	(users includes: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     (aPassword = '123456') ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:13:19'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:13:19'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:13:19'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:13:19'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:13:19'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:13:19'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:13:19'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:13:19'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:13:49'!
test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	
	self 
	should: [ innerInterface createCart: 2 with: '123'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface wrongPasswordError.].

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:14:06' prior: 50787715!
test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	
	self 
	should: [ innerInterface createCart: 2 with: '1234'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface wrongPasswordError.].

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:14:28' prior: 50787729!
test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:14:32'!
ERROR!
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 12:15:39' prior: 50787463!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Dictionary add: 1->'123456'; add: 2->'1234'; yourself. 
	lastId _ 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:15:39'!
ERROR!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:15:39'!
ERROR!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:15:39'!
ERROR!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:15:39'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:15:39'!
ERROR!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:15:39'!
ERROR!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:15:39'!
ERROR!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:15:39'!
ERROR!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:15:39'!
ERROR!
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 12:16:07' prior: 50787759!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Dictionary new.
	users add: 1->'123456'; add: 2->'1234'; yourself. 
	lastId _ 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:16:07'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:16:07'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:16:07'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:16:07'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:16:07'!
ERROR!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:16:07'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:16:07'!
ERROR!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:16:07'!
FAILURE!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:16:07'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:17:19' prior: 50787671!
createCart: aClientId with: aPassword

	(users includes: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     (users at: aClientId = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:17:19'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:17:19'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:17:19'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:17:19'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:17:19'!
ERROR!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:17:19'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:17:19'!
ERROR!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:17:19'!
FAILURE!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:17:19'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:18:01' prior: 50787848!
createCart: aClientId with: aPassword

	(users includes: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     (users at: aClientId = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:18:02'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:18:02'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:18:02'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:18:02'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:02'!
ERROR!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:18:02'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:02'!
ERROR!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:18:02'!
FAILURE!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:02'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:04'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:18:34' prior: 50787896!
createCart: aClientId with: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     (users at: aClientId = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:18:35'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:18:35'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:18:35'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:18:35'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:35'!
ERROR!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:18:35'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:35'!
ERROR!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:18:35'!
FAILURE!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:35'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:39'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:49'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:53'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:18:58'!
ERROR!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:23'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:19:30' prior: 50787948!
createCart: aClientId with: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:19:30'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:19:30'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:19:30'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:19:30'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:30'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:19:30'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:30'!
ERROR!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:19:30'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:30'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:30'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:19:37' prior: 50787330!
test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:38'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:19:38'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:19:38'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:19:38'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:19:38'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:38'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:19:38'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:38'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:19:38'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:38'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:51'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:19:51'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:19:51'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:19:51'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:19:51'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:51'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:19:51'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:51'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:19:51'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:19:51'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:29:37'!
test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addCart: 1 
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	"cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1."

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:32:59'!
test10AddingAValidItemInACartListsCorrectly

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).
	
	"cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1."

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:33:29'!
test11AddingAValidItemInACartListsCorrectly

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).
	
	"cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1."

	
	
	! !

!methodRemoval: InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:33:29'!
test10AddingAValidItemInACartListsCorrectly

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).
	
	"cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1."

	
	
	!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:34:00'!
addToCart: aCartId withISBN: aBookISBN quantity: aBookQuantity! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:34:06' prior: 50788243!
addToCart: aCartId withISBN: aBookISBN quantity: aBookQuantity

	! !

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:34:11'!
FAILURE!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:35:16' prior: 50788248!
addToCart: aCartId withISBN: aBookISBN quantity: aBookQuantity

	cartDicc at: aCartId ! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:35:58' prior: 50788257!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	(cartDicc at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:35:59'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:35:59'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:35:59'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:35:59'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:35:59'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:35:59'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:35:59'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:35:59'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:35:59'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:35:59'!
ERROR!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:35:59'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:35:59'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:36:10' prior: 50788263!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	^ (cartDicc at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:36:37'!
ERROR!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:36:37'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:36:37'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:36:48' prior: 50788158!
test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addCart: 1. 
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	"cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1."

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:37:13' prior: 50788376!
test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	

	
	
	! !

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:37:13'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:37:13'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:37:43' prior: 50788198!
test11AddingAValidItemInACartListsCorrectly

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:38:54'!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:39:12' prior: 50788471!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:39:34' prior: 50788487!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:40:14'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:40:14'!
FAILURE!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:40:14'!
FAILURE!
!InnerInterface class methodsFor: 'exception' stamp: 'st 11/9/2019 12:40:50'!
itemNotInCatalogError

	^'Item is not in catalog'.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:41:05' prior: 50788506!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:41:05'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:41:17'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:42:34'!
test12AddingANonExistingCartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:42:42' prior: 50788581!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:42:43' prior: 50788717!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	
	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:42:50'!
test13AddingANonExistingCartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !

!methodRemoval: InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:42:50'!
test12AddingANonExistingCartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:44:08' prior: 50788749!
test13AddingANonExistingCartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.

	self 
	should: [ innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:44:09'!
FAILURE!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:44:45' prior: 50788318!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
cart _ cartDicc at: aCartId ifAbsent: [].

	 (cartDicc at: aCartId) add: aQuantity of: anISBN.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:44:52' prior: 50788808!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
	
	 cart _ cartDicc at: aCartId ifAbsent: [].

	 (cartDicc at: aCartId) add: aQuantity of: anISBN.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:45:15' prior: 50788816!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
	
	 cart _ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].

	 (cartDicc at: aCartId) add: aQuantity of: anISBN.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:45:25' prior: 50788824!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
	
	 cart _ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].

	 cart add: aQuantity of: anISBN.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:45:25'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:45:25'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:47:20' prior: 50786717!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface cart |
	
	cart _ testObjectsFactory createCart.
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:47:23'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:47:23'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:47:49' prior: 50788894!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface cart |
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:47:54' prior: 50788961!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:47:55'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:47:55'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:48:19' prior: 50786761!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc cart |
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	
	cartDicc add:1->cart; yourself.
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:48:57' prior: 50789038!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:49:01'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:49:01'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:50:01' prior: 50786923!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface create.
			
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 2 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
		
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:50:05'!
FAILURE!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:50:18' prior: 50789124!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface create.
			
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 2 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
		
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:50:18'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:50:18'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:50:42' prior: 50787012!
test04ListingANonExistingCartReturnsError

	| innerInterface |
	
	
	innerInterface _ InnerInterface create.
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:50:45'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:51:00'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:53:00'!
PASSED!

!methodRemoval: InnerInterface #cartDicc stamp: 'st 11/9/2019 12:53:17'!
cartDicc

	^ cartDicc.!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'st 11/9/2019 12:53:35'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'st 11/9/2019 12:53:35'!
PASSED!

----STARTUP---- (9 November 2019 17:42:05) as /home/tejo240/Documents/Facultad/Inge1/CuisUniversity-3839v2/TusLibros.image!


!classDefinition: #InnerInterfaceTest category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 09:55:45'!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	! !

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
Object subclass: #InnerInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 09:59:23' prior: 50789498!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	innerInterface _ InnerInterface new.
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:01:25' prior: 50789510!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface new.
	
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:02:42'!
listCart: aCartId

	^ OrderedCollection new.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:07:04'!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface new.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !

!classDefinition: #NameOfSubclass category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'cartList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NameOfSubclass category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'cartList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NameOfSubclass category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'cartDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NameOfSubclass category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'cartDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #NameOfSubclass stamp: 'PB 11/9/2019 17:42:21'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'cartDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/9/2019 17:42:21'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:10:17' prior: 50789526!
listCart: aCartId

	^ cartDicc at: aCartId.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:11:04' prior: 50789530!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface new.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterface methodsFor: 'access' stamp: 'st 11/9/2019 10:11:28'!
cartDicc

	^ cartDicc.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:12:39' prior: 50789594!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface new.
	innerInterface cartDicc add: 1 -> (OrderedCollection with: 1).
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:12:52' prior: 50789517!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface new.
	innerInterface cartDicc add: 1 -> (OrderedCollection new).
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:12:59' prior: 50789621!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface new.
	(innerInterface cartDicc) add: 1 -> (OrderedCollection new).
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:13:04' prior: 50789608!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface new.
	(innerInterface cartDicc) add: 1 -> (OrderedCollection with: 1).
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:13:45' prior: 50789643!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc|
	
	innerInterface _ InnerInterface new.
	cartDicc _ innerInterface cartDicc.
	cartDicc add: 1 -> (OrderedCollection with: 1).
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:14:12' prior: 50789656!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc|
	
	innerInterface _ InnerInterface new.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:(1 -> (OrderedCollection with: 1)).
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:14:43' prior: 50789670!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc|
	
	innerInterface _ InnerInterface new.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:(1 -> (OrderedCollection with: 1)); yourself.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:14:53' prior: 50789684!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc|
	
	innerInterface _ InnerInterface new.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:15:26' prior: 50789632!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface new.
	(innerInterface cartDicc) add: 1 -> (OrderedCollection new); yourself.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 10:16:30'!
initialize

	cartDicc _ Dictionary new.! !
!InnerInterface class methodsFor: 'initialize' stamp: 'st 11/9/2019 10:30:56'!
create

	self new initialize.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:38:18' prior: 50789698!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc|
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:38:24' prior: 50789712!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.
	(innerInterface cartDicc) add: 1 -> (OrderedCollection new); yourself.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterface class methodsFor: 'initialize' stamp: 'st 11/9/2019 10:39:35' prior: 50789727!
create

	^self new initialize.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:40:40' prior: 50789731!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:42:46'!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	cartItems _ OrderedCollection with: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:43:26' prior: 50789774!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	cartDicc add:2->(OrderedCollection with: 4 with: 5); yourself.
	
	cartItems _ OrderedCollection with: 4 with: 5.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:45:51'!
test03ListingANonExistingCartReturnsError

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	cartItems _ OrderedCollection with: 4 with: 5.
		
	self assert: cartItems equals: (innerInterface listCart: 5).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:46:04'!
test04ListingANonExistingCartReturnsError

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	cartItems _ OrderedCollection with: 4 with: 5.
		
	self assert: cartItems equals: (innerInterface listCart: 5).
	
	! !

!methodRemoval: InnerInterfaceTest #test03ListingANonExistingCartReturnsError stamp: 'PB 11/9/2019 17:42:21'!
test03ListingANonExistingCartReturnsError

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	cartItems _ OrderedCollection with: 4 with: 5.
		
	self assert: cartItems equals: (innerInterface listCart: 5).
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:47:37' prior: 50789817!
test04ListingANonExistingCartReturnsError

	| innerInterface cartItems cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	cartItems _ OrderedCollection with: 4 with: 5.
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = innerInterface nonExistingCartError.].
	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:47:50' prior: 50789845!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = innerInterface nonExistingCartError.].
	
	
	! !
!InnerInterface class methodsFor: 'exception' stamp: 'st 11/9/2019 10:48:33'!
nonExistingCartError

	^'The specified cart does not exists'.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:48:55' prior: 50789863!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:49:11' prior: 50789589!
listCart: aCartId

	^ cartDicc at: aCartId ifAbsent: [].! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:49:28' prior: 50789900!
listCart: aCartId

	^ cartDicc at: aCartId ifAbsent: [self error: self nonExistingCartError].! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:49:41' prior: 50789905!
listCart: aCartId

	^ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:50:48'!
test05CreatingACartReturnsEmptyCollection

	| innerInterface cartDicc |
	
	innerInterface _ InnerInterface create.

	

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:50:55' prior: 50789917!
test05CreatingACartReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 10:53:36' prior: 50789924!
test05CreatingACartReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 1 with: '123456'.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:54:15'!
createCart: aClientId with: aPassword

	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 10:58:33' prior: 50789941!
createCart: aClientId with: aPassword

	cartDicc add: 1->(OrderedCollection new)! !

!classDefinition: #PortfolioTest category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:21'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:21'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51'!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:15'!
test08PortfolioTransasctionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:21'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:21'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #Account category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:21'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:21'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18'!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36'!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55'!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32'!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59'!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29'!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54'!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35'!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52'!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46'!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56'!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51'!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32'!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25'!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38'!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02'!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33'!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15'!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: #'Portfolio-Solucion' stamp: 'PB 11/9/2019 17:42:22'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classRemoval: #Withdraw stamp: 'PB 11/9/2019 17:42:22'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'PB 11/9/2019 17:42:22'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'PB 11/9/2019 17:42:22'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'PB 11/9/2019 17:42:23'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'PB 11/9/2019 17:42:23'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'PB 11/9/2019 17:42:23'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'PB 11/9/2019 17:42:23'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'PB 11/9/2019 17:42:24'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!CartTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:28:34'!
test09ListingAnEmptyCartReturnsEmptyCollection

	| cart |
	
	cart := testObjectsFactory createCart.
	

	self assert: (OrderedCollection new) equals: cart listItems.! !
!Cart methodsFor: 'queries' stamp: 'st 11/9/2019 11:29:22'!
listItems
! !
!Cart methodsFor: 'queries' stamp: 'st 11/9/2019 11:29:36' prior: 50790739!
listItems

	^ items.! !
!Cart methodsFor: 'queries' stamp: 'st 11/9/2019 11:30:02' prior: 50790742!
listItems

	^ items asOrderedCollection.! !
!Cart methodsFor: 'queries' stamp: 'st 11/9/2019 11:30:24' prior: 50790746!
listItems

	^ items asOrderedCollection.! !
!CartTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:30:41'!
test10ListingANonEmptyCartReturnsItemCollection

	| cart |
	
	cart := testObjectsFactory createCart.
	

	self assert: (OrderedCollection new) equals: cart listItems.! !
!CartTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:31:38' prior: 50790754!
test10ListingANonEmptyCartReturnsItemCollection

	| cart |
	
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.

	self assert: (OrderedCollection with: testObjectsFactory itemSellByTheStore) equals: cart listItems.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:33:29' prior: 50789884!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc |
	
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cartDicc add:1->(OrderedCollection with: 1); yourself.
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:33:49' prior: 50789745!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.
	(innerInterface cartDicc) add: 1 -> (testObjectsFactory createCart); yourself.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 11:34:39' prior: 50789911!
listCart: aCartId

	| cart |
	cart _ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].
	
	^ cart listItems.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 11:34:42' prior: 50790801!
listCart: aCartId

	| cart |
	
	cart _ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].
	
	^ cart listItems.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:35:23' prior: 50790789!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface cart |
	
	cart _ testObjectsFactory createCart.
	innerInterface _ InnerInterface create.
	(innerInterface cartDicc) add: 1 -> cart; yourself.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'setup' stamp: 'st 11/9/2019 11:35:45'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:37:38' prior: 50789761!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc cart |
	
	cart _ testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	
	cartDicc add:1->cart; yourself.
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:39:49' prior: 50789788!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems cartDicc cart1 cart2 |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	
	
	cart1 _ testObjectsFactory createCart.
	cart1 add: testObjectsFactory itemSellByTheStore.
	cart2 _ testObjectsFactory createCart.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cartDicc add:1->cart1; yourself.
	cartDicc add:2->cart2; yourself.
	
		
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:40:03' prior: 50790851!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems cartDicc cart1 cart2 |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	
	
	cart1 _ testObjectsFactory createCart.
	cart1 add: testObjectsFactory itemSellByTheStore.
	cart2 _ testObjectsFactory createCart.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cartDicc add:1->cart1; yourself.
	cartDicc add:2->cart2; yourself.
		
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:44:39' prior: 50790876!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems cartDicc cart1 cart2 |
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	
	cart1 _ testObjectsFactory createCart.
	cart1 add: testObjectsFactory itemSellByTheStore.
	cart2 _ testObjectsFactory createCart.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cart2 add: testObjectsFactory itemSellByTheStore.
	cartDicc add:1->cart1; yourself.
	cartDicc add:2->cart2; yourself.
		
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:45:15' prior: 50790773!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc cart1 |
	
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cart1 _ testObjectsFactory createCart.

	
	cartDicc add:1->cart1; yourself.
	
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:45:24' prior: 50790926!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc cart1 |
	
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cart1 _ testObjectsFactory createCart.

	
	cartDicc add:1->cart1; yourself.
	
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:45:27' prior: 50790943!
test04ListingANonExistingCartReturnsError

	| innerInterface cartDicc cart1 |
	
	
	innerInterface _ InnerInterface create.
	cartDicc _ innerInterface cartDicc.
	cart1 _ testObjectsFactory createCart.

	
	cartDicc add:1->cart1; yourself.	
	
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 11:46:10' prior: 50789945!
createCart: aClientId with: aPassword

	cartDicc add: 1->(Cart new)! !

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/9/2019 17:42:24'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/9/2019 17:42:24'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 11:47:31' prior: 50790977!
createCart: aClientId with: aPassword

	cartDicc add: 1->(testObjectsFactory createCart)! !
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 11:48:04' prior: 50789723!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.! !

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/9/2019 17:42:24'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/9/2019 17:42:24'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 11:49:49' prior: 50791004!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	lastId _ 1.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 11:50:21' prior: 50790998!
createCart: aClientId with: aPassword

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 11:59:59'!
test06TryingToCreateACartWithANonExistingUserReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 3 with: '123456'.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:00:30' prior: 50791038!
test06TryingToCreateACartWithANonExistingUserReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	
	
	self 
	should: [ innerInterface createCart: 3 with: '123456'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingUserCartError.].

	
	
	! !
!InnerInterface class methodsFor: 'exception' stamp: 'st 11/9/2019 12:01:01'!
nonExistingUserCartError

	^'The specified user does not exists'.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:01:44' prior: 50791049!
test06TryingToCreateACartWithANonExistingUserReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	self 
	should: [ innerInterface createCart: 3 with: '123456'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingUserCartError.].

	
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:02:20' prior: 50791032!
createCart: aClientId with: aPassword

	aClientId = 3 ifTrue: [].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:02:51' prior: 50791082!
createCart: aClientId with: aPassword

	aClientId = 3 ifTrue: [self error: InnerInterface nonExistingUserError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterface class methodsFor: 'exception' stamp: 'st 11/9/2019 12:03:37'!
nonExistingUserError

	^'The specified user does not exists'.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:03:48' prior: 50791068!
test06TryingToCreateACartWithANonExistingUserReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	self 
	should: [ innerInterface createCart: 3 with: '123456'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingUserError.].

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:05:17'!
test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:05:29' prior: 50791117!
test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:06:53' prior: 50791125!
test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '123456'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:08:04' prior: 50791090!
createCart: aClientId with: aPassword

	aClientId = 1 ifFalse: [self error: InnerInterface nonExistingUserError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/9/2019 17:42:24'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/9/2019 17:42:24'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 12:09:11' prior: 50791026!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Collection with: 1 with: 2.
	lastId _ 1.! !
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 12:09:38' prior: 50791172!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ OrderedCollection with: 1 with: 2.
	lastId _ 1.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:10:13' prior: 50791146!
createCart: aClientId with: aPassword

	(users includes: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:11:11'!
test07TryingToCreateACartWithAWrongPasswordReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '123'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:11:22'!
test08TryingToCreateACartWithAWrongPasswordReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '123'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !

!methodRemoval: InnerInterfaceTest #test07TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/9/2019 17:42:24'!
test07TryingToCreateACartWithAWrongPasswordReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '123'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:11:53' prior: 50791208!
test08TryingToCreateACartWithAWrongPasswordReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	
	self 
	should: [ innerInterface createCart: 2 with: '123'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface wrongPasswordError.].

	
	
	! !
!InnerInterface class methodsFor: 'exception' stamp: 'st 11/9/2019 12:12:12'!
wrongPasswordError

	^'Wrong Password'.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:13:09' prior: 50791188!
createCart: aClientId with: aPassword

	(users includes: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     (aPassword ~= '123456') ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:13:19' prior: 50791248!
createCart: aClientId with: aPassword

	(users includes: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     (aPassword = '123456') ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:13:49'!
test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	
	self 
	should: [ innerInterface createCart: 2 with: '123'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface wrongPasswordError.].

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:14:06' prior: 50791272!
test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	
	self 
	should: [ innerInterface createCart: 2 with: '1234'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface wrongPasswordError.].

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:14:28' prior: 50791286!
test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 12:15:39' prior: 50791180!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Dictionary add: 1->'123456'; add: 2->'1234'; yourself. 
	lastId _ 1.! !
!InnerInterface methodsFor: 'initialization' stamp: 'st 11/9/2019 12:16:07' prior: 50791312!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Dictionary new.
	users add: 1->'123456'; add: 2->'1234'; yourself. 
	lastId _ 1.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:17:19' prior: 50791260!
createCart: aClientId with: aPassword

	(users includes: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     (users at: aClientId = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:18:01' prior: 50791330!
createCart: aClientId with: aPassword

	(users includes: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     (users at: aClientId = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:18:34' prior: 50791343!
createCart: aClientId with: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     (users at: aClientId = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:19:30' prior: 50791356!
createCart: aClientId with: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:19:37' prior: 50791135!
test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:29:37'!
test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addCart: 1 
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	"cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1."

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:32:59'!
test10AddingAValidItemInACartListsCorrectly

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).
	
	"cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1."

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:33:29'!
test11AddingAValidItemInACartListsCorrectly

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).
	
	"cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1."

	
	
	! !

!methodRemoval: InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/9/2019 17:42:24'!
test10AddingAValidItemInACartListsCorrectly

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).
	
	"cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1."

	
	
	!
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:34:00'!
addToCart: aCartId withISBN: aBookISBN quantity: aBookQuantity! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:34:06' prior: 50791478!
addToCart: aCartId withISBN: aBookISBN quantity: aBookQuantity

	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:35:16' prior: 50791483!
addToCart: aCartId withISBN: aBookISBN quantity: aBookQuantity

	cartDicc at: aCartId ! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:35:58' prior: 50791488!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	(cartDicc at: aCartId) add: aQuantity of: anISBN.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:36:10' prior: 50791494!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	^ (cartDicc at: aCartId) add: aQuantity of: anISBN.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:36:48' prior: 50791393!
test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addCart: 1. 
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	"cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1."

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:37:13' prior: 50791508!
test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	

	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:37:43' prior: 50791433!
test11AddingAValidItemInACartListsCorrectly

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:38:54'!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:39:12' prior: 50791555!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:39:34' prior: 50791571!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterface class methodsFor: 'exception' stamp: 'st 11/9/2019 12:40:50'!
itemNotInCatalogError

	^'Item is not in catalog'.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:41:05' prior: 50791590!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:42:34'!
test12AddingANonExistingCartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:42:42' prior: 50791614!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:42:43' prior: 50791652!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	
	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:42:50'!
test13AddingANonExistingCartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !

!methodRemoval: InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/9/2019 17:42:24'!
test12AddingANonExistingCartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:44:08' prior: 50791684!
test13AddingANonExistingCartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.

	self 
	should: [ innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:44:45' prior: 50791501!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
cart _ cartDicc at: aCartId ifAbsent: [].

	 (cartDicc at: aCartId) add: aQuantity of: anISBN.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:44:52' prior: 50791739!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
	
	 cart _ cartDicc at: aCartId ifAbsent: [].

	 (cartDicc at: aCartId) add: aQuantity of: anISBN.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:45:15' prior: 50791747!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
	
	 cart _ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].

	 (cartDicc at: aCartId) add: aQuantity of: anISBN.! !
!InnerInterface methodsFor: 'api' stamp: 'st 11/9/2019 12:45:25' prior: 50791755!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
	
	 cart _ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].

	 cart add: aQuantity of: anISBN.! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:47:20' prior: 50790817!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface cart |
	
	cart _ testObjectsFactory createCart.
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:47:49' prior: 50791774!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface cart |
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:47:54' prior: 50791786!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:48:19' prior: 50790834!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems cartDicc cart |
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	
	cartDicc add:1->cart; yourself.
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:48:57' prior: 50791808!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:50:01' prior: 50790901!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface create.
			
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 2 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
		
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:50:18' prior: 50791839!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface create.
			
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 2 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
		
	cartItems _ OrderedCollection with: testObjectsFactory itemSellByTheStore with: testObjectsFactory itemSellByTheStore.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'st 11/9/2019 12:50:42' prior: 50790960!
test04ListingANonExistingCartReturnsError

	| innerInterface |
	
	
	innerInterface _ InnerInterface create.
	
	self 
	should: [ innerInterface listCart: 5 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].
	
	
	! !

!methodRemoval: InnerInterface #cartDicc stamp: 'PB 11/9/2019 17:42:24'!
cartDicc

	^ cartDicc.!

!classRemoval: #InnerInterface stamp: 'PB 11/9/2019 17:42:59'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'PB 11/9/2019 17:43:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'PB 11/9/2019 17:43:00'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'PB 11/9/2019 17:43:00'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InnerInterfaceTest stamp: 'PB 11/9/2019 17:43:00'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'PB 11/9/2019 17:43:01'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'PB 11/9/2019 17:43:01'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'PB 11/9/2019 17:43:01'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/tejo240/Documents/Facultad/Inge1/Ejercicios/25-TusLibros/3/TusLibros.st----!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'PB 11/9/2019 17:43:30'!
PASSED!

----SNAPSHOT----(9 November 2019 17:45:53) TusLibros.image priorSource: 14510744!

----STARTUP---- (9 November 2019 17:52:20) as /home/tejo240/Documents/Facultad/Inge1/CuisUniversity-3839v2/TusLibros.image!


!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'PB 11/9/2019 17:52:29'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!testRun: #InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'PB 11/9/2019 17:52:32'!
PASSED!

!methodRemoval: InnerInterfaceTest #test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/9/2019 17:52:58'!
test10TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self assert: (OrderedCollection new) equals: (innerInterface listCart: 1).
	
	

	
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/9/2019 17:53:04'!
test10AddingAValidItemInACartListsCorrectly

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).


	
	
	! !

!methodRemoval: InnerInterfaceTest #test11AddingAValidItemInACartListsCorrectly stamp: 'PB 11/9/2019 17:53:04'!
test11AddingAValidItemInACartListsCorrectly

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	self assert: 
	(OrderedCollection 
		with: testObjectsFactory itemSellByTheStore
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).


	
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/9/2019 17:53:07'!
test11AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	
	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !

!methodRemoval: InnerInterfaceTest #test12AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/9/2019 17:53:07'!
test12AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	
	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/9/2019 17:53:10'!
test12AddingANonExistingCartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.

	self 
	should: [ innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !

!methodRemoval: InnerInterfaceTest #test13AddingANonExistingCartReturnsError stamp: 'PB 11/9/2019 17:53:10'!
test13AddingANonExistingCartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.

	self 
	should: [ innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/9/2019 17:55:10'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/9/2019 17:58:01' prior: 50792966!
test11AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.
	"self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.]."


	
	
	! !

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/9/2019 17:58:01'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/9/2019 18:08:10' prior: 50793035!
test11AddingAnInvalidItemInACartReturnsError

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self 
	should: [ innerInterface addToCart: 1 withISBN: testObjectsFactory itemNotSellByTheStore quantity: 2.  ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface itemNotInCatalogError.].


	
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/9/2019 18:08:13'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/9/2019 18:08:13'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/9/2019 18:14:05'!
test13CannotCheckoutANonExistingCart

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.

	self 
	should: [ innerInterface addToCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/9/2019 18:16:01' prior: 50793121!
test13CannotCheckoutANonExistingCart

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.

	self 
	should: [ innerInterface checkoutCart: 3 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/9/2019 18:19:31' prior: 50793137!
test13CannotCheckoutANonExistingCart

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.

	self 
	should: [ innerInterface checkoutCart: 3 withCardNumber: 1234123412341234 expirationYear: 2020 expirationMonth: 12 ofOwnerOfName: 'Cesar Fuentes'. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/9/2019 18:20:50'!
checkoutCart: cartId withCardNumber: cardNumber expirationYear: expirationYear expirationMonth: expirationMonth ofOwnerOfName: ownerName

	 ! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/9/2019 18:21:54' prior: 50793170!
checkoutCart: cartId withCardNumber: cardNumber expirationYear: expirationYear expirationMonth: expirationMonth ofOwnerOfName: ownerName


	 ! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/9/2019 18:23:51' prior: 50793178!
checkoutCart: aCartId withCardNumber: aCardNumber expirationYear: anExpirationYear expirationMonth: anExpirationMonth ofOwnerOfName: anOwnerName

 | cart |
	
	 cart _ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].


	 ! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/9/2019 18:23:56' prior: 50793186!
checkoutCart: aCartId withCardNumber: aCardNumber expirationYear: anExpirationYear expirationMonth: anExpirationMonth ofOwnerOfName: anOwnerName

 	| cart |
	
	 cart _ cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].


	 ! !

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/9/2019 18:24:03'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/9/2019 18:24:03'!
PASSED!
!InnerInterface methodsFor: 'nil' stamp: 'PB 11/9/2019 18:25:58'!
assertCartExists: aCartId

	! !
!InnerInterface methodsFor: 'assertions' stamp: 'PB 11/9/2019 18:26:35' prior: 50793261!
assertCartExists: aCartId

	cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/9/2019 18:27:24' prior: 50786683!
listCart: aCartId

	| cart |
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	^ cart listItems.! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/9/2019 18:27:51' prior: 50788834!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
	
	 self assertCartExists: aCartId.
	 cart _ cartDicc at: aCartId.
	 cart add: aQuantity of: anISBN.! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/9/2019 18:28:01' prior: 50793197!
checkoutCart: aCartId withCardNumber: aCardNumber expirationYear: anExpirationYear expirationMonth: anExpirationMonth ofOwnerOfName: anOwnerName

 	| cart |
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.


	 ! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/9/2019 18:28:05'!
PASSED!

----SNAPSHOT----(9 November 2019 18:28:25) TusLibros.image priorSource: 14649983!

----SNAPSHOT----(9 November 2019 18:39:15) TusLibros.image priorSource: 14774278!

----STARTUP---- (11 November 2019 17:56:08) as /home/pboitier/Documentos/IngSoft1/linux64/TusLibros.image!


!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/11/2019 17:56:39'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/11/2019 17:56:39'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 17:58:51' prior: 50793153!
test13CannotCheckoutANonExistingCart

	| innerInterface creditCard|
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.

	"creditCard := CreditCard for
	self 
	12341234 expirationYear: 2020 expirationMonth: 12 .ofOwnerOfName: 'Cesar Fuentes'. 
	should: [ innerInterface checkoutCart: 3 withCreditCard: creditCard. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.]."


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:11:34' prior: 50793407!
test13CannotCheckoutANonExistingCart

	| innerInterface creditCard|
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	
	creditCard := CreditCard expiringOn: (Date today).
	self should: [ innerInterface checkoutCart: 3 withCreditCard: creditCard. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !

!methodRemoval: InnerInterface #checkoutCart:withCardNumber:expirationYear:expirationMonth:ofOwnerOfName: stamp: 'PB 11/11/2019 18:12:22'!
checkoutCart: aCartId withCardNumber: aCardNumber expirationYear: anExpirationYear expirationMonth: anExpirationMonth ofOwnerOfName: anOwnerName

 	| cart |
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.


	 !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/11/2019 18:13:17'!
checkoutCart: aCartId withCard: aCreditCard

	 | cart |
	
	 self assertCartExists: aCartId.
	 cart _ cartDicc at: aCartId.
	 ! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/11/2019 18:13:23'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/11/2019 18:13:23'!
ERROR!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/11/2019 18:13:23'!
ERROR!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/11/2019 18:13:44'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/11/2019 18:13:44'!
ERROR!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/11/2019 18:13:44'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'PB 11/11/2019 18:14:36'!
checkoutCart: aCartId withCreditCard: aCreditCard

	 | cart |
	
	 self assertCartExists: aCartId.
	 cart _ cartDicc at: aCartId.
	 ! !

!methodRemoval: InnerInterface #checkoutCart:withCard: stamp: 'PB 11/11/2019 18:14:36'!
checkoutCart: aCartId withCard: aCreditCard

	 | cart |
	
	 self assertCartExists: aCartId.
	 cart _ cartDicc at: aCartId.
	 !

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/11/2019 18:14:43'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/11/2019 18:14:43'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:16:00' prior: 50793426!
test13CannotCheckoutANonExistingCart

	| innerInterface creditCard|
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	
	creditCard := CreditCard expiringOn: (Date tomorrow).
	self should: [ innerInterface checkoutCart: 3 withCreditCard: creditCard. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/11/2019 18:16:01'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/11/2019 18:16:01'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:16:38'!
test14CheckingOutCartWorksCorrectly

	| innerInterface creditCard|
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	
	creditCard := CreditCard expiringOn: (Date tomorrow).
	self should: [ innerInterface checkoutCart: 3 withCreditCard: creditCard. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:17:14' prior: 50793707!
test14CheckingOutCartWorksCorrectly

	| innerInterface creditCard|
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 2.
	creditCard := CreditCard expiringOn: (Date tomorrow).
	
	self should: [ innerInterface checkoutCart: 3 withCreditCard: creditCard. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:17:45' prior: 50793724!
test14CheckingOutCartWorksCorrectly

	| innerInterface creditCard|
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 2 withISBN: '1234' quantity: 2.
	creditCard := CreditCard expiringOn: (Date tomorrow).
	
	self should: [ innerInterface checkoutCart: 3 withCreditCard: creditCard. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:18:08' prior: 50793742!
test14CheckingOutCartWorksCorrectly

	| innerInterface creditCard|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 2 withISBN: '1234' quantity: 2.
	innerInterface checkoutCart: 3 withCreditCard: creditCard. 
	
	
	self should: [ ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:20:55'!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 2 withISBN: '1234' quantity: 2.
	innerInterface checkoutCart: 3 withCreditCard: creditCard. 
	
	
	self should: [ ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !

!methodRemoval: InnerInterfaceTest #test14CheckingOutCartWorksCorrectly stamp: 'PB 11/11/2019 18:20:55'!
test14CheckingOutCartWorksCorrectly

	| innerInterface creditCard|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 2 withISBN: '1234' quantity: 2.
	innerInterface checkoutCart: 3 withCreditCard: creditCard. 
	
	
	self should: [ ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:21:07' prior: 50793780!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 2 withISBN: '1234' quantity: 2.
	innerInterface checkoutCart: 3 withCreditCard: creditCard. 
	


	
	
	! !

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/11/2019 18:21:35'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'initialization' stamp: 'PB 11/11/2019 18:21:53' prior: 50787803!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Dictionary new.
	users add: 1->'123456'; add: 2->'1234'; yourself. 
	lastId _ 1.
	salesBook := OrderedCollection new.! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/11/2019 18:22:27' prior: 50793568!
checkoutCart: aCartId withCreditCard: aCreditCard

	 | cart |
	
	 self assertCartExists: aCartId.
	 cart _ cartDicc at: aCartId.
	Cashier 
	 ! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/11/2019 18:25:04' prior: 50793856!
checkoutCart: aCartId withCreditCard: aCreditCard

	| cart merchantProcessor|
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	"merchantProcessor := MerchantProcessor new.
	Cashier toCheckout: cart charging: aCreditCard 
						throught: aMerchantProcessor on: aDate registeringOn: salesBook."
	 ! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:27:33' prior: 50793818!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 2 withISBN: '1234' quantity: 2.
	innerInterface checkoutCart: 3 withCreditCard: creditCard. 
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: '1234'.
	orderedCollection add: '1234'.
	
	self assert: (innerInterface salesBook) equals: orderedCollection. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:27:36'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:27:43' prior: 50793877!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 2 withISBN: '1234' quantity: 2.
	innerInterface checkoutCart: 2 withCreditCard: creditCard. 
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: '1234'.
	orderedCollection add: '1234'.
	
	self assert: (innerInterface salesBook) equals: orderedCollection. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:27:44'!
ERROR!
!InnerInterface methodsFor: 'access' stamp: 'PB 11/11/2019 18:28:17'!
salesBook

	^salesBook copy.! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:28:25'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:28:25'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:28:56'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:30:03'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:30:19'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:30:19'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:30:29'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:30:40'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:30:40'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:31:29' prior: 50793901!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 2 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkoutCart: 2 withCreditCard: creditCard. 
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: '1234'.
	orderedCollection add: '1234'.
	
	self assert: (innerInterface salesBook) equals: orderedCollection. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:31:30'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:31:37'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:31:37'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:31:43'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:31:43'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:31:59'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:33:20' prior: 50793959!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkoutCart: 1 withCreditCard: creditCard. 
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: '1234'.
	orderedCollection add: '1234'.
	
	self assert: (innerInterface salesBook) equals: orderedCollection. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:33:21'!
FAILURE!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:33:44' prior: 50794000!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkoutCart: 1 withCreditCard: creditCard. 
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: testObjectsFactory itemSellByTheStore.
	orderedCollection add: testObjectsFactory itemSellByTheStore.
	
	self assert: (innerInterface salesBook) equals: orderedCollection. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:33:45'!
FAILURE!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:34:11' prior: 50794025!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkoutCart: 1 withCreditCard: creditCard. 
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: testObjectsFactory itemSellByTheStore.
	orderedCollection add: testObjectsFactory itemSellByTheStore.
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:34:13'!
FAILURE!
!InnerInterface methodsFor: 'api' stamp: 'PB 11/11/2019 18:36:24'!
checkoutCart: aCartId withCreditCard: aCreditCard through: aMerchantProcessor on: aDate

	| cart cashier|
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	cashier := Cashier toCheckout: cart charging: aCreditCard 
						throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	 cashier checkout.! !

!methodRemoval: InnerInterface #checkoutCart:withCreditCard: stamp: 'PB 11/11/2019 18:36:43'!
checkoutCart: aCartId withCreditCard: aCreditCard

	| cart merchantProcessor|
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	"merchantProcessor := MerchantProcessor new.
	Cashier toCheckout: cart charging: aCreditCard 
						throught: aMerchantProcessor on: aDate registeringOn: salesBook."
	 !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/11/2019 18:36:53' prior: 50794078!
checkoutCart: aCartId withCreditCard: aCreditCard through: aMerchantProcessor on: aDate

	| cart cashier|
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	cashier := Cashier toCheckout: cart charging: aCreditCard 
						throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	^cashier checkOut.! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/11/2019 18:37:01'!
checkOutCart: aCartId withCreditCard: aCreditCard through: aMerchantProcessor on: aDate

	| cart cashier|
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	cashier := Cashier toCheckout: cart charging: aCreditCard 
						throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	^cashier checkOut.! !

!methodRemoval: InnerInterface #checkoutCart:withCreditCard:through:on: stamp: 'PB 11/11/2019 18:37:01'!
checkoutCart: aCartId withCreditCard: aCreditCard through: aMerchantProcessor on: aDate

	| cart cashier|
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	cashier := Cashier toCheckout: cart charging: aCreditCard 
						throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	^cashier checkOut.!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:37:53' prior: 50794052!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection|
	creditCard := CreditCard expiringOn: (Date tomorrow).
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: CashierTest on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: testObjectsFactory itemSellByTheStore.
	orderedCollection add: testObjectsFactory itemSellByTheStore.
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:37:54'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:42:22'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 18:45:07' prior: 50794144!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := CashierTest new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: testObjectsFactory itemSellByTheStore.
	orderedCollection add: testObjectsFactory itemSellByTheStore.
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:45:11'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:46:21'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 18:46:38'!
ERROR!

----SNAPSHOT----(11 November 2019 18:52:38) TusLibros.image priorSource: 14774361!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: #TusLibros stamp: 'PB 11/11/2019 18:53:56'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(11 November 2019 18:54:13) TusLibros.image priorSource: 14801923!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: #TusLibros stamp: 'PB 11/11/2019 18:55:08'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'PB 11/11/2019 18:55:14'!
initialize

	debitBehavior := [ :anAmount :aCreditCard | ]! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'PB 11/11/2019 18:56:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setup' stamp: 'PB 11/11/2019 18:56:34' prior: 50784971!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	merchantProcessor := MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'merchant processor protocol' stamp: 'PB 11/11/2019 18:57:09' prior: 50784978!
debit: anAmount from: aCreditCard 

	^merchantProcessor debit: anAmount from: aCreditCard.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'PB 11/11/2019 18:58:14'!
debit: anAmount from: aCreditCard

	^debitBehavior value: anAmount value: aCreditCard.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/11/2019 18:58:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/11/2019 18:58:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/11/2019 18:58:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/11/2019 18:58:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/11/2019 18:58:17'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/11/2019 18:58:17'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/11/2019 18:58:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/11/2019 18:58:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/11/2019 18:58:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/11/2019 18:58:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/11/2019 18:58:28'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/11/2019 18:58:28'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/11/2019 19:00:01'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/11/2019 19:00:01'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'PB 11/11/2019 19:02:12'!
setDebitBehaviour: aClosure

	debitBehavior := aClosure.! !
!CashierTest methodsFor: 'tests' stamp: 'PB 11/11/2019 19:02:56' prior: 50784913!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	merchantProcessor setDebitBehavior: [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'PB 11/11/2019 19:03:13'!
setDebitBehavior: aClosure

	debitBehavior := aClosure.! !

!methodRemoval: MerchantProcessorSimulator #setDebitBehaviour: stamp: 'PB 11/11/2019 19:03:13'!
setDebitBehaviour: aClosure

	debitBehavior := aClosure.!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/11/2019 19:03:31'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'PB 11/11/2019 19:03:47' prior: 50784887!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	merchantProcessor setDebitBehavior: [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/11/2019 19:04:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/11/2019 19:04:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/11/2019 19:04:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/11/2019 19:04:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/11/2019 19:04:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/11/2019 19:04:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/11/2019 19:04:05'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 19:04:40' prior: 50794175!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: testObjectsFactory itemSellByTheStore.
	orderedCollection add: testObjectsFactory itemSellByTheStore.
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 19:04:42'!
FAILURE!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 19:07:05' prior: 50794415!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: (Sale of: 20).
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 19:07:07'!
FAILURE!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 19:09:15' prior: 50794445!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: (Sale of: 20).
	innerInterface salesBook total.
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 19:09:26'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 19:09:51' prior: 50794472!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor debug|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: (Sale of: 20).
	debug := innerInterface salesBook total.
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 19:10:07'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 19:10:50' prior: 50794500!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor debug|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: (Sale of: 20).
	debug := innerInterface salesBook at: 1 total.
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 19:10:53'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 19:11:03' prior: 50794529!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor debug|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: (Sale of: 20).
	debug := (innerInterface salesBook at: 1) total.
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/11/2019 19:13:15'!
FAILURE!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/11/2019 19:13:36' prior: 50794558!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: (Sale of: 20).
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

----SNAPSHOT----(11 November 2019 19:15:22) TusLibros.image priorSource: 14802393!

----STARTUP---- (16 November 2019 13:54:09) as /home/tejo240/Documents/Facultad/Inge1/CuisUniversity-3839/TusLibros.image!


!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 14:07:36'!
FAILURE!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 14:07:36'!
FAILURE!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 14:07:40'!
FAILURE!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 14:07:40'!
FAILURE!
!Sale methodsFor: 'nil' stamp: 'PB 11/16/2019 14:11:29'!
=anotherSale

	^total = anotherSale total.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 14:11:37'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 14:11:37'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 14:11:37'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 14:12:01'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 14:12:04'!
ERROR!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 14:12:04'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 14:12:08'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:13:02' prior: 50793636!
test13CannotCheckoutANonExistingCart

	| innerInterface creditCard merchantProcessor |
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	
	creditCard := CreditCard expiringOn: (Date tomorrow).
	self should: [innerInterface checkoutCart: 3 withCreditCard: creditCard through: merchantProcessor on: (Date today). ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:13:36' prior: 50794706!
test13CannotCheckoutANonExistingCart

	| innerInterface creditCard merchantProcessor |
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	creditCard := CreditCard expiringOn: (Date tomorrow).
	self should: [innerInterface checkoutCart: 3 withCreditCard: creditCard through: merchantProcessor on: (Date today). ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:13:58' prior: 50794725!
test13CannotCheckoutANonExistingCart

	| innerInterface creditCard merchantProcessor |
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.
	
	self should: [innerInterface checkoutCart: 3 withCreditCard: creditCard through: merchantProcessor on: (Date today). ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:14:21' prior: 50794744!
test13CannotCheckoutANonExistingCart

	| innerInterface creditCard merchantProcessor |
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.
	
	self should: [innerInterface checkOutCart: 3 withCreditCard: creditCard through: merchantProcessor on: (Date today). ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = InnerInterface nonExistingCartError.].


	
	
	! !

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 14:14:22'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 14:14:22'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:36:58'!
test15CheckOutCartFailureDoesNotRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: (Sale of: 20).
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:37:20'!
test15CartCheckOutFailureDoesNotRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: (Sale of: 20).
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!methodRemoval: InnerInterfaceTest #test15CheckOutCartFailureDoesNotRegistersSales stamp: 'PB 11/16/2019 14:37:20'!
test15CheckOutCartFailureDoesNotRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	orderedCollection add: (Sale of: 20).
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:38:07' prior: 50794867!
test15CartCheckOutFailureDoesNotRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).

	self assert: innerInterface salesBook empty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:38:19' prior: 50794916!
test15CartCheckOutFailureDoesNotRegistersSales

	| innerInterface creditCard merchantProcessor|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).

	self assert: innerInterface salesBook empty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:39:43' prior: 50794937!
test15CartCheckOutFailureDoesNotRegistersSales

	| innerInterface creditCard merchantProcessor|
	creditCard := CreditCard expiringOn: (Date yesterday).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).

	self assert: innerInterface salesBook empty. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegistersSales stamp: 'PB 11/16/2019 14:39:44'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:39:52' prior: 50794957!
test15CartCheckOutFailureDoesNotRegistersSales

	| innerInterface creditCard merchantProcessor|
	creditCard := CreditCard expiringOn: (Date yesterday).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegistersSales stamp: 'PB 11/16/2019 14:39:53'!
FAILURE!
!Cashier class methodsFor: 'assertions' stamp: 'PB 11/16/2019 14:43:45' prior: 50784799!
assertIsNotExpired: aCreditCard on: aDate
	
	(aCreditCard isExpiredOn: aDate) ifTrue: [^self error: self canNotChargeAnExpiredCreditCardErrorMessage ]! !

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegistersSales stamp: 'PB 11/16/2019 14:43:49'!
FAILURE!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegistersSales stamp: 'PB 11/16/2019 14:43:49'!
FAILURE!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegistersSales stamp: 'PB 11/16/2019 14:48:37'!
FAILURE!
!Cashier class methodsFor: 'assertions' stamp: 'PB 11/16/2019 14:52:55' prior: 50795005!
assertIsNotExpired: aCreditCard on: aDate
	
	|debugvar|
	(aCreditCard isExpiredOn: aDate) ifTrue: [^self error: self canNotChargeAnExpiredCreditCardErrorMessage ].
	debugvar :=  (aCreditCard isExpiredOn: aDate).! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 14:59:20' prior: 50794981!
test15CartCheckOutFailureDoesNotRegistersSales

	| innerInterface creditCard merchantProcessor|
	creditCard := CreditCard expiringOn: (Date yesterday).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:00:40'!
test15CartCheckOutFailureDoesNotRegisterSales

	| innerInterface creditCard merchantProcessor|
	creditCard := CreditCard expiringOn: (Date yesterday).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	! !

!methodRemoval: InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegistersSales stamp: 'PB 11/16/2019 15:00:40'!
test15CartCheckOutFailureDoesNotRegistersSales

	| innerInterface creditCard merchantProcessor|
	creditCard := CreditCard expiringOn: (Date yesterday).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	!

Date!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:03:20' prior: 50795054!
test15CartCheckOutFailureDoesNotRegisterSales

	| innerInterface creditCard merchantProcessor|
	"creditCard := testObjectFactory expiredCreditCard."
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:03:53' prior: 50795096!
test15CartCheckOutFailureDoesNotRegisterSales

	| innerInterface creditCard merchantProcessor|
	creditCard := testObjectsFactory expiredCreditCard.
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 15:03:55'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:05:13' prior: 50795116!
test15CartCheckOutFailureDoesNotRegisterSales

	| innerInterface creditCard merchantProcessor|
	creditCard := testObjectsFactory expiredCreditCard.
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	self should: [innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today)]
	

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:05:51' prior: 50795140!
test15CartCheckOutFailureDoesNotRegisterSales

	| innerInterface creditCard merchantProcessor|
	creditCard := testObjectsFactory expiredCreditCard.
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	self should: [innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [].

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:09:06' prior: 50795161!
test15CartCheckOutFailureDoesNotRegisterSales

	| innerInterface creditCard merchantProcessor|
	creditCard := testObjectsFactory expiredCreditCard.
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	self should: [innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier exp.].

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:09:25' prior: 50795184!
test15CartCheckOutFailureDoesNotRegisterSales

	| innerInterface creditCard merchantProcessor|
	creditCard := testObjectsFactory expiredCreditCard.
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	self should: [innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.].

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 15:09:26'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 15:09:27'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 15:09:27'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 15:09:27'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 15:20:29'!
PASSED!

----SNAPSHOT----(16 November 2019 15:26:52) TusLibros.image priorSource: 14814711!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:30:49'!
test16ListingPurchasesOfCustomerWithNoPurchases

	| innerInterface creditCard merchantProcessor|
	creditCard := testObjectsFactory expiredCreditCard.
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	self should: [innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.].

	self assert: innerInterface salesBook isEmpty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:33:15' prior: 50795360!
test16ListingPurchasesOfCustomerWithNoPurchases

	| innerInterface creditCard merchantProcessor|
	creditCard := testObjectsFactory expiredCreditCard.
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.

	self assert: innerInterface listPurchases isEmpty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:40:06' prior: 50795386!
test16ListingPurchasesOfCustomerWithNoPurchases

	| innerInterface creditCard merchantProcessor|
	creditCard := testObjectsFactory expiredCreditCard.
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.

	self assert: (innerInterface listPurchasesOfClient: 1 withPassword: '1234') isEmpty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:40:26' prior: 50795401!
test16ListingPurchasesOfCustomerWithNoPurchases

	|innerInterface|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.

	self assert: (innerInterface listPurchasesOfClient: 1 withPassword: '1234') isEmpty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:41:07' prior: 50795417!
test16ListingPurchasesOfCustomerWithNoPurchases

	|innerInterface|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.

	self assert: (innerInterface listPurchasesOfClient: 1 withPassword: '1234') isEmpty. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 15:41:26' prior: 50795428!
test16ListingPurchasesOfCustomerWithNoPurchases

	|innerInterface|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.

	self assert: (innerInterface listPurchasesOfClient: 1 withPassword: '123456') isEmpty. 
	


	
	
	! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 15:42:51'!
listPurchasesOfClient: aClientId withPassword: aPassword

	 ! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 15:43:28' prior: 50795450!
listPurchasesOfClient: aClientId withPassword: aPassword

	 (users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 15:44:52' prior: 50795455!
listPurchasesOfClient: aClientId withPassword: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].


	! !

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/16/2019 15:47:34'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'initialization' stamp: 'PB 11/16/2019 15:49:52' prior: 50793846!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Dictionary new.
	users add: 1->'123456'; add: 2->'1234'; yourself. 
	lastId _ 1.
	salesBook := OrderedCollection new.
	salesDicc := Dictionary new.! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 15:53:09' prior: 50795466!
listPurchasesOfClient: aClientId withPassword: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].
	
	^salesDicc at: aClientId


	! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 16:01:59' prior: 50795503!
listPurchasesOfClient: aClientId withPassword: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].
	
	^self purchaseListFor: aClientId.


	! !
!InnerInterface methodsFor: 'nil' stamp: 'PB 11/16/2019 16:02:14'!
purchaseListFor: aClientId! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:09:56' prior: 50795527!
purchaseListFor: aClientId

	||
	"
	(salesDicc at: aClientId) inject: 0
	into: [:total :sale | Cannot store into ->total := total + (sale total)] "
	
	! !

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/16/2019 16:11:56'!
Object subclass: #InnerInterface
	instanceVariableNames: 'booksSoldToClientDicc testObjectsFactory lastId users salesBook salesDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:11:56' prior: 50793265!
assertCartExists: aCartId

	booksSoldToClientDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:11:56' prior: 50793272!
listCart: aCartId

	| cart |
	
	self assertCartExists: aCartId.
	cart _ booksSoldToClientDicc at: aCartId.
	^ cart listItems.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:11:56' prior: 50793279!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
	
	 self assertCartExists: aCartId.
	 cart _ booksSoldToClientDicc at: aCartId.
	 cart add: aQuantity of: anISBN.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:11:56' prior: 50795492!
initialize

	booksSoldToClientDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Dictionary new.
	users add: 1->'123456'; add: 2->'1234'; yourself. 
	lastId _ 1.
	salesBook := OrderedCollection new.
	salesDicc := Dictionary new.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:11:56' prior: 50788014!
createCart: aClientId with: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	booksSoldToClientDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:11:56' prior: 50794117!
checkOutCart: aCartId withCreditCard: aCreditCard through: aMerchantProcessor on: aDate

	| cart cashier|
	
	self assertCartExists: aCartId.
	cart _ booksSoldToClientDicc at: aCartId.
	cashier := Cashier toCheckout: cart charging: aCreditCard 
						throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	^cashier checkOut.! !

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/16/2019 16:12:11'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:12:11' prior: 50795550!
assertCartExists: aCartId

	cartDicc at: aCartId ifAbsent: [self error: InnerInterface nonExistingCartError].! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:12:11' prior: 50795558!
listCart: aCartId

	| cart |
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	^ cart listItems.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:12:11' prior: 50795566!
addToCart: aCartId withISBN: anISBN quantity: aQuantity

	 | cart |
	
	 self assertCartExists: aCartId.
	 cart _ cartDicc at: aCartId.
	 cart add: aQuantity of: anISBN.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:12:11' prior: 50795575!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Dictionary new.
	users add: 1->'123456'; add: 2->'1234'; yourself. 
	lastId _ 1.
	salesBook := OrderedCollection new.
	salesDicc := Dictionary new.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:12:11' prior: 50795587!
createCart: aClientId with: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	lastId _ lastId + 1.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 16:12:11' prior: 50795601!
checkOutCart: aCartId withCreditCard: aCreditCard through: aMerchantProcessor on: aDate

	| cart cashier|
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	cashier := Cashier toCheckout: cart charging: aCreditCard 
						throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	^cashier checkOut.! !

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook booksSoldToClientDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/16/2019 16:12:30'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook booksSoldToClientDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 17:07:20' prior: 50795532!
purchaseListFor: aClientId

	|total|
	"^ PurchaseList withPurchases: (booksSoldToClientDicc at: aClientId) total: total"
	"
	(salesDicc at: aClientId) inject: 0
	into: [:total :sale | Cannot store into ->total := total + (sale total)] "
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 17:24:24' prior: 50795439!
test16ListingPurchasesOfCustomerWithNoPurchases

	|innerInterface purchaseList|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	self assert:  purchaseList purchases isEmpty.
	self assert: 0 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 17:25:26' prior: 50795711!
test16ListingPurchasesOfCustomerWithNoPurchases

	|innerInterface purchaseList|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	self assert: purchaseList purchases isEmpty.
	self assert: 0 equals: purchaseList total. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 17:26:02'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 17:26:02'!
ERROR!

!classDefinition: #PurchaseList category: #TusLibros stamp: 'PB 11/16/2019 17:27:16'!
Object subclass: #PurchaseList
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 17:27:09' prior: 50795700!
purchaseListFor: aClientId

	||
	^PurchaseList new "withPurchases: (booksSoldToClientDicc at: aClientId) total: total"
	"
	(salesDicc at: aClientId) inject: 0
	into: [:total :sale | Cannot store into ->total := total + (sale total)] "
	
	! !
!Sale methodsFor: 'total' stamp: 'PB 11/16/2019 17:31:12' prior: 50785029!
total
	
	^ total! !

Object subclass: #Sale
	instanceVariableNames: 'total productsSold'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: #TusLibros stamp: 'PB 11/16/2019 17:32:41'!
Object subclass: #Sale
	instanceVariableNames: 'total productsSold'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale class methodsFor: 'instance creation' stamp: 'PB 11/16/2019 17:34:17'!
of: aISBNQuantityDicc totaling: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ! !
!Sale methodsFor: 'initialization' stamp: 'PB 11/16/2019 17:35:37'!
initializeSaleOf: aISBNQuantityDicc totaling: aTotal

	total := aTotal.
	productsSold :=  aISBNQuantityDicc.! !
!Sale class methodsFor: 'instance creation' stamp: 'PB 11/16/2019 17:36:24' prior: 50795779!
of: aISBNQuantityDicc totaling: aTotal

	^self new initializeSaleOf: aISBNQuantityDicc totaling: aTotal
! !

!methodRemoval: Sale class #of: stamp: 'PB 11/16/2019 17:36:54'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!methodRemoval: Sale #initializeTotal: stamp: 'PB 11/16/2019 17:37:02'!
initializeTotal: aTotal

	total := aTotal !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 17:37:46'!
ERROR!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 17:37:46'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 17:37:46'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 17:39:45' prior: 50794587!
test14CheckingOutCartRegistersSales

	| innerInterface creditCard orderedCollection merchantProcessor productsSold|
	creditCard := CreditCard expiringOn: (Date tomorrow).
	merchantProcessor := MerchantProcessorSimulator new.	
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: creditCard through: merchantProcessor on: (Date today).
	
	orderedCollection := OrderedCollection new.
	productsSold := Dictionary new.
	productsSold at: (testObjectsFactory itemSellByTheStore) put: 2.
	orderedCollection add: (Sale of: productsSold totaling: 20).
	
	self assert:orderedCollection equals: (innerInterface salesBook). 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 17:40:08'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 17:40:42'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 17:41:14'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 17:43:50'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'PB 11/16/2019 17:54:58' prior: 50784770!
checkOut

	self calculateTotal.
	self debitTotal.

	^ total! !

!methodRemoval: Cashier #registerSale stamp: 'PB 11/16/2019 17:55:06'!
registerSale

	salesBook add: self createSale!
!Cashier methodsFor: 'checkout - private' stamp: 'PB 11/16/2019 17:57:28' prior: 50784757!
createSale

	^ Sale of: (cart items) totaling: total
! !
!Cashier methodsFor: 'checkout' stamp: 'PB 11/16/2019 17:58:49' prior: 50795911!
checkOut

	self calculateTotal.
	self debitTotal.

	^ self createSale.! !
!Cart methodsFor: 'initialization' stamp: 'PB 11/16/2019 17:59:53' prior: 50784595!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Dictionary new.! !
!Cart methodsFor: 'adding' stamp: 'PB 11/16/2019 18:12:48' prior: 50784625!
add: anItem

	items at: anItem ifAbsent:[items at: anItem put: 1]. 
	^ items at: anItem put: 1 + (items at: anItem). ! !
!Cart methodsFor: 'adding' stamp: 'PB 11/16/2019 18:13:00' prior: 50795936!
add: anItem

	items at: anItem ifAbsent:[^items at: anItem put: 1]. 
	^ items at: anItem put: 1 + (items at: anItem). ! !
!Cart methodsFor: 'adding' stamp: 'PB 11/16/2019 18:13:06' prior: 50795943!
add: anItem

	items at: anItem ifAbsent:[^items at: anItem put: 1]. 
	^items at: anItem put: 1 + (items at: anItem). ! !
!Cart methodsFor: 'adding' stamp: 'PB 11/16/2019 18:14:08' prior: 50784617!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'PB 11/16/2019 18:14:24' prior: 50795957!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items at: anItem ifAbsent:[^items at: anItem put: 1]. 
	^items at: anItem put: aQuantity + (items at: anItem). ! !

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:14:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:14:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:14:43'!
FAILURE!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:14:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:14:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:14:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:14:43'!
FAILURE!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:14:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:14:43'!
FAILURE!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:14:43'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:14:43'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:16:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:16:10'!
FAILURE!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:16:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:16:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:16:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:16:10'!
FAILURE!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:16:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:16:10'!
FAILURE!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:16:10'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:16:10'!
FAILURE!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:16:18'!
FAILURE!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:16:18'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'PB 11/16/2019 18:17:00' prior: 50795950!
add: anItem

	items at: anItem ifAbsent:[^items at: anItem put: 1]. 
	^items at: anItem put: 1 + (items at: anItem). ! !
!Cart methodsFor: 'adding' stamp: 'PB 11/16/2019 18:17:15' prior: 50796050!
add: anItem

	self assertIsValidItem: anItem.

	items at: anItem ifAbsent:[^items at: anItem put: 1]. 
	^items at: anItem put: 1 + (items at: anItem). ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:17:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:17:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:17:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:17:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:17:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:17:18'!
FAILURE!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:17:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:17:18'!
FAILURE!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:17:18'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:17:18'!
FAILURE!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:17:50'!
FAILURE!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:17:50'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'PB 11/16/2019 18:19:13' prior: 50784605!
includes: anItem

	^items includesKey: anItem ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:19:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:19:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:19:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:19:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:19:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:19:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:19:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:19:15'!
FAILURE!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:19:15'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:19:15'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'PB 11/16/2019 18:20:02' prior: 50784601!
occurrencesOf: anItem

	^items at:anItem.  ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:20:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:20:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:20:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:20:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:20:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:20:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:20:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:20:08'!
FAILURE!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:20:08'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:20:08'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:20:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:20:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:20:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:20:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:20:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:20:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:20:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:20:19'!
FAILURE!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:20:19'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:20:19'!
FAILURE!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:20:25'!
FAILURE!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:20:25'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'PB 11/16/2019 18:21:08' prior: 50795965!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items at: anItem ifAbsent:[^items at: anItem put: aQuantity]. 
	^items at: anItem put: aQuantity + (items at: anItem). ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:21:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:21:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:21:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:21:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:21:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:21:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:21:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:21:11'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:21:11'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:21:11'!
FAILURE!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:21:11'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:21:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:21:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:21:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:21:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:21:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:21:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:21:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:21:16'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:21:16'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:21:16'!
FAILURE!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:21:16'!
FAILURE!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:21:22'!
FAILURE!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:21:22'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:21:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:21:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:21:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:21:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:21:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:21:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:21:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:21:40'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:21:40'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:21:40'!
FAILURE!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:21:40'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'PB 11/16/2019 18:22:47' prior: 50786585!
listItems

	^ items keys asOrderedCollection.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:22:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:22:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:22:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:22:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:22:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:22:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:22:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:22:51'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:22:51'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:22:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:22:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:22:55'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:22:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:22:55'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:22:55'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:22:55'!
FAILURE!

----SNAPSHOT----(16 November 2019 18:24:00) TusLibros.image priorSource: 14838599!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:24:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:24:12'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:24:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:24:12'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:24:12'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:24:12'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:25:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:25:55'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:25:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:25:55'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:25:55'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:25:55'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'PB 11/16/2019 18:26:19' prior: 50784955!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut total = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:26:20'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'PB 11/16/2019 18:27:39' prior: 50795920!
createSale

	^ Sale of: (cart itemsAndQuantities) totaling: total
! !
!Cart methodsFor: 'nil' stamp: 'PB 11/16/2019 18:27:53'!
itemsAndQuantities

	^items copy.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:28:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:28:04'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:28:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:28:04'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:28:04'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:28:04'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PB 11/16/2019 18:29:23' prior: 50784725!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore).
	
	cart total.! !
!CartTest methodsFor: 'tests' stamp: 'PB 11/16/2019 18:29:35' prior: 50796488!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore).
	
	cart total.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:29:36'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'PB 11/16/2019 18:29:43' prior: 50796498!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore).! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:29:45'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:29:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:29:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:29:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:29:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:29:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:29:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:29:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:29:45'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:29:45'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:29:45'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PB 11/16/2019 18:30:01' prior: 50796511!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore).! !
!Cart methodsFor: 'queries' stamp: 'PB 11/16/2019 18:35:39' prior: 50796341!
listItems

	^ items copy.! !

!methodRemoval: Cart #itemsAndQuantities stamp: 'PB 11/16/2019 18:35:42'!
itemsAndQuantities

	^items copy.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:35:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:35:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:35:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:35:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:35:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:35:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:35:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:35:47'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:35:47'!
FAILURE!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:35:47'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PB 11/16/2019 18:35:56' prior: 50786534!
test09ListingAnEmptyCartReturnsEmptyCollection

	| cart |
	
	cart := testObjectsFactory createCart.
	

	self assert: (Dictionary new) equals: cart listItems.! !

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:35:57'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:35:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:35:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:35:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:35:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:35:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:35:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:35:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:35:57'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:35:57'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:35:57'!
FAILURE!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:35:57'!
FAILURE!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:36:07'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:36:09'!
FAILURE!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:36:09'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PB 11/16/2019 18:36:29' prior: 50786597!
test10ListingANonEmptyCartReturnsItemCollection

	| cart |
	
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.

	self assert: (Dictionary at: testObjectsFactory itemSellByTheStore put:1) equals: cart listItems.! !

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:36:30'!
ERROR!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:36:48'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'PB 11/16/2019 18:37:34' prior: 50796663!
test10ListingANonEmptyCartReturnsItemCollection

	| cart items|
	
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	items := Dictionary new.
	items at: testObjectsFactory itemSellByTheStore put:1.


	self assert: items equals: cart listItems.! !

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:37:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:37:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:37:52'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:37:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:37:52'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:37:52'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:37:52'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:37:58'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:38:12'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:38:28'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:38:43'!
ERROR!
!Cart methodsFor: 'total' stamp: 'PB 11/16/2019 18:41:06' prior: 50784613!
total

	|total|
	total := 0.
	items keysDo: [:key | total := total + (items at: key) * catalog at: key].
	^total.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PB 11/16/2019 18:41:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PB 11/16/2019 18:41:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PB 11/16/2019 18:41:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PB 11/16/2019 18:41:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PB 11/16/2019 18:41:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PB 11/16/2019 18:41:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PB 11/16/2019 18:41:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PB 11/16/2019 18:41:07'!
PASSED!

!testRun: #CartTest #test09ListingAnEmptyCartReturnsEmptyCollection stamp: 'PB 11/16/2019 18:41:07'!
PASSED!

!testRun: #CartTest #test10ListingANonEmptyCartReturnsItemCollection stamp: 'PB 11/16/2019 18:41:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:41:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:41:15'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:41:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:41:15'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:41:15'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:41:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:41:19'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:41:19'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'PB 11/16/2019 18:41:34' prior: 50796460!
createSale

	^ Sale of: (cart items) totaling: total
! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:41:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:41:36'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:41:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:41:36'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:41:36'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:41:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:41:40'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:41:40'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'PB 11/16/2019 18:41:58' prior: 50796826!
createSale

	^ Sale of: (cart listItems) totaling: total
! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:42:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:42:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:42:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:42:21'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:42:21'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:42:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:42:24'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:42:24'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:43:14'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:46:03'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:46:03'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'PB 11/16/2019 18:49:45' prior: 50795925!
checkOut

	self calculateTotal.
	self debitTotal.
	self registerSale.
	^ self createSale.! !
!Cashier methodsFor: 'checkout - private' stamp: 'PB 11/16/2019 18:50:26'!
registerSale

	salesBook add: (self createSale)! !
!Cashier methodsFor: 'checkout' stamp: 'PB 11/16/2019 18:50:58' prior: 50796897!
checkOut

	self calculateTotal.
	self debitTotal.
	self registerSale.
	^ total.! !
!Cashier methodsFor: 'checkout' stamp: 'PB 11/16/2019 18:51:02' prior: 50796908!
checkOut

	self calculateTotal.
	self debitTotal.
	self registerSale.
	^total.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:51:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:51:04'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:51:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:51:04'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:51:04'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:51:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:51:04'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'PB 11/16/2019 18:51:40' prior: 50796914!
checkOut

	self calculateTotal.
	self debitTotal.
	self registerSale.
	^self createSale.! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:51:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:51:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:51:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:51:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:51:47'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:51:47'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:51:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:51:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:51:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:51:53'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:51:53'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'PB 11/16/2019 18:52:42' prior: 50784869!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut total.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:52:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:52:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:52:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:52:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:52:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:52:43'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:52:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:52:43'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:52:58'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:53:01'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:53:01'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:53:04'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:53:08'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'PB 11/16/2019 18:53:21' prior: 50794325!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	merchantProcessor setDebitBehavior: [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut total.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:53:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:53:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:53:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:53:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:53:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:53:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:53:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PB 11/16/2019 18:53:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PB 11/16/2019 18:53:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PB 11/16/2019 18:53:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PB 11/16/2019 18:53:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PB 11/16/2019 18:53:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PB 11/16/2019 18:53:26'!
PASSED!

----SNAPSHOT----(16 November 2019 18:53:40) TusLibros.image priorSource: 14871900!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 18:54:29'!
ERROR!

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/16/2019 18:54:59'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'initialization' stamp: 'PB 11/16/2019 18:55:35' prior: 50795647!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Dictionary new.
	users add: 1->'123456'; add: 2->'1234'; yourself. 
	lastId _ 1.
	salesBook := OrderedCollection new.
	salesByClient := Dictionary new.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:00:26' prior: 50795754!
purchaseListFor: aClientId

	^PurchaseList of: (salesByClient at: aClientId)

	
	! !

!classDefinition: 'PurchaseList class' category: #TusLibros stamp: 'PB 11/16/2019 19:01:39'!
PurchaseList class
	instanceVariableNames: 'list'!

!classDefinition: 'PurchaseList class' category: #TusLibros stamp: 'PB 11/16/2019 19:01:40'!
PurchaseList class
	instanceVariableNames: 'list total'!
!PurchaseList class methodsFor: 'nil' stamp: 'PB 11/16/2019 19:01:48'!
of: aSaleList

	list := aSaleList.
	total := aSaleList sum: [:sale | sale total.].! !

PurchaseList class
	instanceVariableNames: ''!

!classDefinition: 'PurchaseList class' category: #TusLibros stamp: 'PB 11/16/2019 19:02:29'!
PurchaseList class
	instanceVariableNames: ''!

Object subclass: #PurchaseList
	instanceVariableNames: 'list total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #PurchaseList category: #TusLibros stamp: 'PB 11/16/2019 19:02:34'!
Object subclass: #PurchaseList
	instanceVariableNames: 'list total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!PurchaseList class methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:03:40' prior: 50797164!
of: aSaleList

	^self new initializeWith: aSaleList.
	! !
!PurchaseList methodsFor: 'nil' stamp: 'PB 11/16/2019 19:03:55'!
initializeWith: aSaleList

	list := aSaleList.
	total := aSaleList sum: [:sale | sale total.].! !
!PurchaseList methodsFor: 'nil' stamp: 'PB 11/16/2019 19:05:21'!
purchases

	^list copy.! !
!PurchaseList methodsFor: 'nil' stamp: 'PB 11/16/2019 19:07:58'!
createList

	list! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:13:12' prior: 50797192!
initializeWith: aSaleList

	list := self createList: aSaleList.
	total := aSaleList sum: [:sale | sale total.].! !

!methodRemoval: PurchaseList #createList stamp: 'PB 11/16/2019 19:13:33'!
createList

	list!
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:13:42'!
createList: aSaleList! !

Object subclass: #PurchaseList
	instanceVariableNames: 'dicc total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #PurchaseList category: #TusLibros stamp: 'PB 11/16/2019 19:14:28'!
Object subclass: #PurchaseList
	instanceVariableNames: 'dicc total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:14:35' prior: 50797205!
initializeWith: aSaleList

	dicc := self createList: aSaleList.
	total := aSaleList sum: [:sale | sale total.].! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:15:07'!
createDictionaryFromList: aSaleList! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:15:07' prior: 50797231!
initializeWith: aSaleList

	dicc := self createDictionaryFromList: aSaleList.
	total := aSaleList sum: [:sale | sale total.].! !

!methodRemoval: PurchaseList #createList: stamp: 'PB 11/16/2019 19:15:07'!
createList: aSaleList!
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:15:16' prior: 50797238!
createDictionaryFromList: aSaleList

	! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:19:36' prior: 50797254!
createDictionaryFromList: aSaleList

	|totalSale|
	
	totalSale := Sale of: (Dictionary new) totaling: 0.
	aSaleList do: [:sale|  totalSale := totalSale + sale].! !

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:19:47'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:19:47'!
ERROR!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:19:53'!
FAILURE!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:19:53'!
FAILURE!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:19:53'!
FAILURE!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:19:53'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:19:53'!
FAILURE!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 19:19:53'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:19:53'!
FAILURE!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 19:19:53'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:19:53'!
FAILURE!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:19:53'!
FAILURE!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 19:19:53'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:19:53'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 19:19:53'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 19:19:53'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 19:19:53'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:19:53'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:20:10' prior: 50788972!
test01ListingAnEmptyCartReturnsAnEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	
	self assert: (Dictionary new) equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:20:11'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:20:11'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:20:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:20:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:20:11'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:20:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 19:20:11'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:20:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 19:20:11'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:20:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:20:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 19:20:11'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:20:11'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 19:20:11'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 19:20:11'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 19:20:11'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:20:11'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:20:56' prior: 50789053!
test02ListingACartWithOneItemReturnsNonEmptyCollection

	| innerInterface cartItems |
		
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	
	cartItems _ Dictionary new. 
	cartItems at: testObjectsFactory itemSellByTheStore put: 1.
		
	self assert: cartItems equals: (innerInterface listCart: 1).
	
	! !

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:20:56'!
FAILURE!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:20:56'!
FAILURE!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:20:56'!
FAILURE!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:20:56'!
FAILURE!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:20:56'!
FAILURE!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 19:20:56'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:20:56'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:22:11' prior: 50789152!
test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart

	| innerInterface cartItems |
	
	innerInterface _ InnerInterface create.
			
	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 2 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
		
	cartItems _ Dictionary new.
	cartItems at: testObjectsFactory itemSellByTheStore put: 2.
		
	self assert: cartItems equals: (innerInterface listCart: 2).
	
	! !

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:22:11'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:22:11'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:22:11'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:22:11'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:22:11'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 19:22:11'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 19:22:11'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:22:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 19:22:11'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:22:12'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 19:22:12'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 19:22:12'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 19:22:12'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:22:12'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:22:24' prior: 50785717!
test05CreatingACartReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 1 with: '123456'.
	
	self assert: (Dictionary new) equals: (innerInterface listCart: 1).

	
	
	! !

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:25'!
FAILURE!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:25'!
FAILURE!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:22:25'!
FAILURE!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 19:22:25'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:22:25'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:22:33' prior: 50788067!
test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self assert: (Dictionary new) equals: (innerInterface listCart: 1).

	
	
	! !

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:33'!
FAILURE!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:22:33'!
FAILURE!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 19:22:33'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:22:33'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:22:41' prior: 50787743!
test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection

	| innerInterface |
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	self assert: (Dictionary new) equals: (innerInterface listCart: 1).

	
	
	! !

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:22:42'!
FAILURE!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 19:22:42'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:22:42'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:23:27' prior: 50792933!
test10AddingAValidItemInACartListsCorrectly

	| innerInterface cartItems|
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	cartItems := Dictionary new.
	cartItems at: testObjectsFactory itemSellByTheStore put: 2.

	self assert: 
	(OrderedCollection 
		
		with: testObjectsFactory itemSellByTheStore) equals: (innerInterface listCart: 1).


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:23:35' prior: 50797813!
test10AddingAValidItemInACartListsCorrectly

	| innerInterface cartItems|
	
	innerInterface _ InnerInterface create.

	innerInterface createCart: 2 with: '1234'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2. 

	cartItems := Dictionary new.
	cartItems at: testObjectsFactory itemSellByTheStore put: 2.

	self assert: 
	(cartItems) equals: (innerInterface listCart: 1).


	
	
	! !

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 19:23:36'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:23:36'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:23:36'!
ERROR!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:23:40'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 19:23:44'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:23:44'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:23:44'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:24:17'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:24:17'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 19:28:53' prior: 50795515!
listPurchasesOfClient: aClientId withPassword: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].
	
	salesByClient at: aClientId ifAbsent: [salesByClient at: aClientId put: Dictionary empty.].
	^self purchaseListFor: aClientId.


	! !

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:29:34'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:29:34'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:29:40'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 19:30:01' prior: 50797992!
listPurchasesOfClient: aClientId withPassword: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].
	
	salesByClient at: aClientId ifAbsent: [salesByClient at: aClientId put: Dictionary new.].
	^self purchaseListFor: aClientId.


	! !

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:30:10'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:30:10'!
ERROR!
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:30:45' prior: 50797198!
purchases

	^dicc copy.! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:31:01' prior: 50797259!
createDictionaryFromList: aSaleList

	|totalSale|
	
	totalSale := Sale of: (Dictionary new) totaling: 0.
	aSaleList do: [:sale|  totalSale := totalSale + sale].! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:32:04' prior: 50798045!
createDictionaryFromList: aSaleList

	|totalSale|
	
	totalSale := Sale of: (Dictionary new) totaling: 0.
	(aSaleList isEmpty) ifTrue:[^ Dictionary new.].
	aSaleList do: [:sale|  totalSale := totalSale + sale].! !

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:32:10'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:32:10'!
ERROR!
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 19:34:38' prior: 50797243!
initializeWith: aSaleList

	dicc := self createDictionaryFromList: aSaleList.
	aSaleList isEmpty ifTrue: [total := 0. ^self].
	total := aSaleList sum: [:sale | sale total.].! !

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:34:50'!
ERROR!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:34:50'!
ERROR!
!PurchaseList methodsFor: 'nil' stamp: 'PB 11/16/2019 19:35:07'!
total

	^total.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 19:35:11'!
PASSED!

----SNAPSHOT----(16 November 2019 19:35:24) TusLibros.image priorSource: 14894845!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:38:44'!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	self assert: purchaseList purchases isEmpty.
	self assert: 0 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:40:26' prior: 50798155!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface add: testObjectsFactory itemSellByStore.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	self assert: purchaseList purchases isEmpty.
	self assert: 0 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:40:37' prior: 50798170!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface add: testObjectsFactory itemSellByStore.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	self assert: purchaseList purchases isEmpty.
	self assert: 0 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:47:52' prior: 50798186!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface add: testObjectsFactory itemSellByStore.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	self assert: purchaseList purchases isEmpty.
	self assert: 0 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:48:00' prior: 50798202!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface add: testObjectsFactory itemSellByTheStore.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	self assert: purchaseList purchases isEmpty.
	self assert: 0 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:48:11' prior: 50798218!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList cartList|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface add: testObjectsFactory itemSellByTheStore.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	self assert: purchaseList purchases isEmpty.
	self assert: 0 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:52:06' prior: 50798235!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList cartList|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface add: testObjectsFactory itemSellByTheStore.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList := cartList at: testObjectsFactory itemSellByTheStore put: 1.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 10 equals: purchaseList total. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 19:52:10'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:52:54' prior: 50798252!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList cartList|

	innerInterface _ InnerInterface create.
	innerInterface createCart: 1 with: '123456'.
	innerInterface add: testObjectsFactory itemSellByTheStore.
	"innerInterface checkOut:"

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList := cartList at: testObjectsFactory itemSellByTheStore put: 1.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 10 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:54:05' prior: 50798276!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList cartList merchantProcessor|

	innerInterface _ InnerInterface create.
	merchantProcessor := MerchantProcessorSimulator new.
	innerInterface createCart: 1 with: '123456'.
	innerInterface add: testObjectsFactory itemSellByTheStore.
	innerInterface checkOutCart: 1 withCreditCard: testObjectsFactory notExpiredCreditCard through: merchantProcessor on: (Date today).

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList := cartList at: testObjectsFactory itemSellByTheStore put: 1.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 10 equals: purchaseList total. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 19:54:14'!
ERROR!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:54:38' prior: 50798297!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList cartList merchantProcessor|

	innerInterface _ InnerInterface create.
	merchantProcessor := MerchantProcessorSimulator new.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: testObjectsFactory itemSellByTheStore.
	innerInterface checkOutCart: 1 withCreditCard: testObjectsFactory notExpiredCreditCard through: merchantProcessor on: (Date today).

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList := cartList at: testObjectsFactory itemSellByTheStore put: 1.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 10 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:55:06' prior: 50798328!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList cartList merchantProcessor|

	innerInterface _ InnerInterface create.
	merchantProcessor := MerchantProcessorSimulator new.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 1 withCreditCard: testObjectsFactory notExpiredCreditCard through: merchantProcessor on: (Date today).

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList := cartList at: testObjectsFactory itemSellByTheStore put: 1.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 10 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:55:08' prior: 50798355!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList cartList merchantProcessor|

	innerInterface _ InnerInterface create.
	merchantProcessor := MerchantProcessorSimulator new.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	innerInterface checkOutCart: 1 withCreditCard: testObjectsFactory notExpiredCreditCard through: merchantProcessor on: (Date today).

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList := cartList at: testObjectsFactory itemSellByTheStore put: 1.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 10 equals: purchaseList total. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 19:55:09'!
FAILURE!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 19:57:04' prior: 50798383!
test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart

	|innerInterface purchaseList cartList merchantProcessor|

	innerInterface _ InnerInterface create.
	merchantProcessor := MerchantProcessorSimulator new.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	innerInterface checkOutCart: 1 withCreditCard: testObjectsFactory notExpiredCreditCard through: merchantProcessor on: (Date today).

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList at: testObjectsFactory itemSellByTheStore put: 1.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 10 equals: purchaseList total. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 19:57:07'!
FAILURE!

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 19:57:07'!
FAILURE!
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 20:00:46' prior: 50795671!
checkOutCart: aCartId withCreditCard: aCreditCard through: aMerchantProcessor on: aDate

	| cart cashier sale|
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	cashier := Cashier toCheckout: cart charging: aCreditCard 
						throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	sale := cashier checkOut.
	self registerSaleInSalesByClient: sale.
	^sale! !
!InnerInterface methodsFor: 'nil' stamp: 'PB 11/16/2019 20:02:43'!
registerSale: aSale ofCart: aCart

	

	! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 20:03:34' prior: 50798465!
registerSale: aSale ofCart: aCart

	

	! !

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesByClient cartsByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/16/2019 20:06:30'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesByClient cartsByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'initialization' stamp: 'PB 11/16/2019 20:06:56' prior: 50797137!
initialize

	cartDicc _ Dictionary new.
	testObjectsFactory _ StoreTestObjectsFactory new.
	users _ Dictionary new.
	users add: 1->'123456'; add: 2->'1234'; yourself. 
	lastId _ 1.
	salesBook := OrderedCollection new.
	salesByClient := Dictionary new.
	cartsByClient := Dictionary new.
	! !

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/16/2019 20:20:54'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: InnerInterface #registerSale:ofCart: stamp: 'PB 11/16/2019 20:21:04'!
registerSale: aSale ofCart: aCart

	

	!

Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesByClient cartsByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: #TusLibros stamp: 'PB 11/16/2019 20:25:08'!
Object subclass: #InnerInterface
	instanceVariableNames: 'cartDicc testObjectsFactory lastId users salesBook salesByClient cartsByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 20:25:44' prior: 50795658!
createCart: aClientId with: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	cartsByClient at:(cartDicc at: lastId) put: aClientId.
	lastId _ lastId + 1.! !

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 20:26:09'!
ERROR!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 20:26:09'!
PASSED!

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 20:26:09'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 20:26:18'!
ERROR!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 20:26:18'!
ERROR!
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 20:27:39' prior: 50798450!
checkOutCart: aCartId withCreditCard: aCreditCard through: aMerchantProcessor on: aDate

	| cart cashier sale|
	
	self assertCartExists: aCartId.
	cart _ cartDicc at: aCartId.
	cashier := Cashier toCheckout: cart charging: aCreditCard 
						throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	sale := cashier checkOut.
	self registerSale: sale forClient: (cartsByClient at: aCartId).
	^sale! !
!InnerInterface methodsFor: 'nil' stamp: 'PB 11/16/2019 20:27:53'!
registerSale: aSale forClient: aClientId! !
!InnerInterface methodsFor: 'api' stamp: 'PB 11/16/2019 20:28:12' prior: 50798538!
createCart: aClientId with: aPassword

	(users includesKey: aClientId) ifFalse: [self error: InnerInterface nonExistingUserError].
     ((users at: aClientId) = aPassword) ifFalse: [self error: InnerInterface wrongPasswordError].

	cartDicc add: lastId->(testObjectsFactory createCart).
	cartsByClient at: lastId put: aClientId.
	lastId _ lastId + 1.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 20:29:14' prior: 50798640!
registerSale: aSale forClient: aClientId

	
	(salesByClient at: aClientId) add: aSale.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 20:29:41' prior: 50798659!
registerSale: aSale forClient: aClientId

	salesByClient at: aClientId ifAbsent:[salesByClient at: aClientId put: OrderedCollection new.].
	(salesByClient at: aClientId) add: aSale.! !

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 20:29:58'!
ERROR!

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 20:29:58'!
ERROR!
!Sale methodsFor: 'nil' stamp: 'PB 11/16/2019 20:31:26'!
+ anotherSale

	||
	
! !
!Sale methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 20:33:35' prior: 50798681!
+ anotherSale

	|sumOfProducts|
	
	sumOfProducts := productsSold.
	
	! !

!methodRemoval: Sale #+ stamp: 'PB 11/16/2019 20:41:15'!
+ anotherSale

	|sumOfProducts|
	
	sumOfProducts := productsSold.
	
	!
!PurchaseList methodsFor: 'nil' stamp: 'PB 11/16/2019 20:43:28'!
+ anotherSale

	"|sumOfProducts|
	
	sumOfProducts := productsSold.
	
	anotherSale products keysDo: [:key | sumOfProducts at: key ifAbsent:[ sumOfProducts at: key put: (anotherSale products at: key).
												sumOfProducts at: key put: (sumOfProducts at: key + anotherSale)]]"! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 21:31:57'!
 anotherSale

	"|sumOfProducts|
	
	sumOfProducts := productsSold.
	
	anotherSale products keysDo: [:key | sumOfProducts at: key ifAbsent:[ sumOfProducts at: key put: (anotherSale products at: key).
												sumOfProducts at: key put: (sumOfProducts at: key + anotherSale)]]"! !

!methodRemoval: PurchaseList #anotherSale stamp: 'PB 11/16/2019 21:32:00'!
anotherSale

	"|sumOfProducts|
	
	sumOfProducts := productsSold.
	
	anotherSale products keysDo: [:key | sumOfProducts at: key ifAbsent:[ sumOfProducts at: key put: (anotherSale products at: key).
												sumOfProducts at: key put: (sumOfProducts at: key + anotherSale)]]"!

!methodRemoval: PurchaseList #+ stamp: 'PB 11/16/2019 21:32:03'!
+ anotherSale

	"|sumOfProducts|
	
	sumOfProducts := productsSold.
	
	anotherSale products keysDo: [:key | sumOfProducts at: key ifAbsent:[ sumOfProducts at: key put: (anotherSale products at: key).
												sumOfProducts at: key put: (sumOfProducts at: key + anotherSale)]]"!
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 21:42:18' prior: 50798054!
createDictionaryFromList: aSaleList

	|allProducts|
	
	"(aSaleList isEmpty) ifTrue:[^ Dictionary new.].
	aSaleList do: [:sale| |products|  products := sale products.
										products keysDo: [ :key|
											allProducts includesKey: key and (products includesKey: key) ifTrue:[allProducts at: key put: (allProducts at: key + products at: key)]
										].
										]."! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 21:42:28' prior: 50798740!
createDictionaryFromList: aSaleList

	"|allProducts|
	
	(aSaleList isEmpty) ifTrue:[^ Dictionary new.].
	aSaleList do: [:sale| |products|  products := sale products.
										products keysDo: [ :key|
											allProducts includesKey: key and (products includesKey: key) ifTrue:[allProducts at: key put: (allProducts at: key + products at: key)]
										].
										]."! !
!Sale methodsFor: 'nil' stamp: 'PB 11/16/2019 21:42:52'!
products

	^productsSold copy.! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 21:46:26' prior: 50798755!
createDictionaryFromList: aSaleList

	|allProducts|
	
	allProducts := Dictionary new.
	(aSaleList isEmpty) ifTrue:[^ Dictionary new.].
	aSaleList do: [:sale| |products|  products := sale products.
										products keysDo: [ :key|
											((allProducts includesKey: key ) and products includesKey: key) ifTrue:[allProducts at: key put: (allProducts at: key + products at: key)]
										].
										].! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 21:46:44' prior: 50798774!
createDictionaryFromList: aSaleList

	|allProducts|
	
	allProducts := Dictionary new.
	(aSaleList isEmpty) ifTrue:[^ Dictionary new.].
	aSaleList do: [:sale| |products|  products := sale products.
										products keysDo: [ :key|
											((allProducts includesKey: key ) and products includesKey: key) ifTrue:[allProducts at: key put: ((allProducts at: key) + (products at: key))]
										].
										].! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 21:48:58' prior: 50798790!
createDictionaryFromList: aSaleList

	|allProducts|
	
	allProducts := Dictionary new.
	(aSaleList isEmpty) ifTrue:[^ Dictionary new.].
	aSaleList do: [:sale| |products|  products := sale products.
										products keysDo: [ :key|
											((allProducts includesKey: key ) and products includesKey: key) ifTrue:[allProducts at: key put: ((allProducts at: key) + (products at: key))].
											((allProducts includesKey: key not) and products includesKey: key) ifTrue: [allProducts at: key put: (products at: key)].
										].
										].! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 21:49:27' prior: 50798806!
createDictionaryFromList: aSaleList

	|allProducts|
	
	allProducts := Dictionary new.
	(aSaleList isEmpty) ifTrue:[^ Dictionary new.].
	aSaleList do: [:sale| |products|  products := sale products.
										products keysDo: [ :key|
											((allProducts includesKey: key ) and products includesKey: key) ifTrue:[allProducts at: key put: ((allProducts at: key) + (products at: key))].
											((allProducts includesKey: key not) and products includesKey: key) ifTrue: [allProducts at: key put: (products at: key)].
										].
										].
									
	^allProducts.! !

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 21:49:56'!
ERROR!

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 21:49:56'!
ERROR!
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 21:50:52' prior: 50798827!
createDictionaryFromList: aSaleList

	|allProducts|
	
	allProducts := Dictionary new.
	(aSaleList isEmpty) ifTrue:[^ Dictionary new.].
	aSaleList do: [:sale| |products|  products := sale products.
										products keysDo: [ :key|
											((allProducts includesKey: key ) and: (products includesKey: key)) ifTrue:[allProducts at: key put: ((allProducts at: key) + (products at: key))].
											((allProducts includesKey: key not) and: (products includesKey: key)) ifTrue: [allProducts at: key put: (products at: key)].
										].
										].
									
	^allProducts.
	! !

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 21:51:00'!
ERROR!

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 21:51:00'!
ERROR!
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'PB 11/16/2019 21:52:04' prior: 50798857!
createDictionaryFromList: aSaleList

	|allProducts|
	
	allProducts := Dictionary new.
	(aSaleList isEmpty) ifTrue:[^ Dictionary new.].
	aSaleList do: [:sale| |products|  products := sale products.
										products keysDo: [ :key|
											((allProducts includesKey: key ) and: (products includesKey: key)) ifTrue:[allProducts at: key put: ((allProducts at: key) + (products at: key))].
											(((allProducts includesKey: key) not) and: (products includesKey: key)) ifTrue: [allProducts at: key put: (products at: key)].
										].
										].
									
	^allProducts.
	! !

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 21:52:20'!
PASSED!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 21:52:44'!
test18ListingPurchasesOfCustomerWithPurchasesDoneInMultipleCarts

	|innerInterface purchaseList cartList merchantProcessor|

	innerInterface _ InnerInterface create.
	merchantProcessor := MerchantProcessorSimulator new.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	innerInterface checkOutCart: 1 withCreditCard: testObjectsFactory notExpiredCreditCard through: merchantProcessor on: (Date today).

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList at: testObjectsFactory itemSellByTheStore put: 1.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 10 equals: purchaseList total. 
	


	
	
	! !
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 21:53:51' prior: 50798912!
test18ListingPurchasesOfCustomerWithPurchasesDoneInMultipleCarts

	|innerInterface purchaseList cartList merchantProcessor|

	innerInterface _ InnerInterface create.
	merchantProcessor := MerchantProcessorSimulator new.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	innerInterface checkOutCart: 1 withCreditCard: testObjectsFactory notExpiredCreditCard through: merchantProcessor on: (Date today).

	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 2 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList at: testObjectsFactory itemSellByTheStore put: 3.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 10 equals: purchaseList total. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test18ListingPurchasesOfCustomerWithPurchasesDoneInMultipleCarts stamp: 'PB 11/16/2019 21:53:52'!
FAILURE!

----SNAPSHOT----(16 November 2019 21:54:17) TusLibros.image priorSource: 14928063!

!testRun: #InnerInterfaceTest #test18ListingPurchasesOfCustomerWithPurchasesDoneInMultipleCarts stamp: 'PB 11/16/2019 21:56:04'!
FAILURE!

!testRun: #InnerInterfaceTest #test18ListingPurchasesOfCustomerWithPurchasesDoneInMultipleCarts stamp: 'PB 11/16/2019 21:56:04'!
FAILURE!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 21:56:29' prior: 50798940!
test18ListingPurchasesOfCustomerWithPurchasesDoneInMultipleCarts

	|innerInterface purchaseList cartList merchantProcessor|

	innerInterface _ InnerInterface create.
	merchantProcessor := MerchantProcessorSimulator new.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	innerInterface checkOutCart: 1 withCreditCard: testObjectsFactory notExpiredCreditCard through: merchantProcessor on: (Date today).

	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 2 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList at: testObjectsFactory itemSellByTheStore put: 3.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 30 equals: purchaseList total. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test18ListingPurchasesOfCustomerWithPurchasesDoneInMultipleCarts stamp: 'PB 11/16/2019 21:56:30'!
FAILURE!
!InnerInterfaceTest methodsFor: 'tests' stamp: 'PB 11/16/2019 22:02:46' prior: 50798987!
test18ListingPurchasesOfCustomerWithPurchasesDoneInMultipleCarts

	|innerInterface purchaseList cartList merchantProcessor|

	innerInterface _ InnerInterface create.
	merchantProcessor := MerchantProcessorSimulator new.
	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 1 withISBN: testObjectsFactory itemSellByTheStore quantity: 1.
	innerInterface checkOutCart: 1 withCreditCard: testObjectsFactory notExpiredCreditCard through: merchantProcessor on: (Date today).

	innerInterface createCart: 1 with: '123456'.
	innerInterface addToCart: 2 withISBN: testObjectsFactory itemSellByTheStore quantity: 2.
	innerInterface checkOutCart: 2 withCreditCard: testObjectsFactory notExpiredCreditCard through: merchantProcessor on: (Date today).

	purchaseList := innerInterface listPurchasesOfClient: 1 withPassword: '123456'.
	cartList := Dictionary new.
	cartList at: testObjectsFactory itemSellByTheStore put: 3.
	
	self assert: cartList equals: purchaseList purchases.
	self assert: 30 equals: purchaseList total. 
	


	
	
	! !

!testRun: #InnerInterfaceTest #test18ListingPurchasesOfCustomerWithPurchasesDoneInMultipleCarts stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test01ListingAnEmptyCartReturnsAnEmptyCollection stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test02ListingACartWithOneItemReturnsNonEmptyCollection stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test03ListingACartReturnsItsItemsWhileHavingCreatedMoreThanOneCart stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test04ListingANonExistingCartReturnsError stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test05CreatingACartReturnsEmptyCollection stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test06TryingToCreateACartWithANonExistingUserReturnsError stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test07TryingToCreateACartWithAExistingUserReturnsEmptyCollection stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test08TryingToCreateACartWithAWrongPasswordReturnsError stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test09TryingToCreateACartWithAValidPasswordReturnsEmptyCollection stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test10AddingAValidItemInACartListsCorrectly stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test11AddingAnInvalidItemInACartReturnsError stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test12AddingANonExistingCartReturnsError stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test13CannotCheckoutANonExistingCart stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test14CheckingOutCartRegistersSales stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test15CartCheckOutFailureDoesNotRegisterSales stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test16ListingPurchasesOfCustomerWithNoPurchases stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test17ListingPurchasesOfCustomerWithPurchasesOfOnlyOneCart stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

!testRun: #InnerInterfaceTest #test18ListingPurchasesOfCustomerWithPurchasesDoneInMultipleCarts stamp: 'PB 11/16/2019 22:02:47'!
PASSED!

----SNAPSHOT----(16 November 2019 22:03:12) TusLibros.image priorSource: 14954395!